/* automatically generated by rust-bindgen 0.63.0 */

pub const FLECS_HI_COMPONENT_ID: u32 = 256;
pub const FLECS_HI_ID_RECORD_ID: u32 = 1024;
pub const FLECS_SPARSE_PAGE_BITS: u32 = 12;
pub const FLECS_ENTITY_PAGE_BITS: u32 = 12;
pub const FLECS_ID_DESC_MAX: u32 = 32;
pub const FLECS_TERM_DESC_MAX: u32 = 16;
pub const FLECS_EVENT_DESC_MAX: u32 = 8;
pub const FLECS_VARIABLE_COUNT_MAX: u32 = 64;
pub const FLECS_QUERY_SCOPE_NESTING_MAX: u32 = 8;
pub const EcsWorldQuitWorkers: u32 = 1;
pub const EcsWorldReadonly: u32 = 2;
pub const EcsWorldInit: u32 = 4;
pub const EcsWorldQuit: u32 = 8;
pub const EcsWorldFini: u32 = 16;
pub const EcsWorldMeasureFrameTime: u32 = 32;
pub const EcsWorldMeasureSystemTime: u32 = 64;
pub const EcsWorldMultiThreaded: u32 = 128;
pub const EcsOsApiHighResolutionTimer: u32 = 1;
pub const EcsOsApiLogWithColors: u32 = 2;
pub const EcsOsApiLogWithTimeStamp: u32 = 4;
pub const EcsOsApiLogWithTimeDelta: u32 = 8;
pub const EcsEntityIsId: u32 = 2147483648;
pub const EcsEntityIsTarget: u32 = 1073741824;
pub const EcsEntityIsTraversable: u32 = 536870912;
pub const EcsIdOnDeleteRemove: u32 = 1;
pub const EcsIdOnDeleteDelete: u32 = 2;
pub const EcsIdOnDeletePanic: u32 = 4;
pub const EcsIdOnDeleteMask: u32 = 7;
pub const EcsIdOnDeleteObjectRemove: u32 = 8;
pub const EcsIdOnDeleteObjectDelete: u32 = 16;
pub const EcsIdOnDeleteObjectPanic: u32 = 32;
pub const EcsIdOnDeleteObjectMask: u32 = 56;
pub const EcsIdExclusive: u32 = 64;
pub const EcsIdDontInherit: u32 = 128;
pub const EcsIdTraversable: u32 = 256;
pub const EcsIdTag: u32 = 512;
pub const EcsIdWith: u32 = 1024;
pub const EcsIdUnion: u32 = 2048;
pub const EcsIdAlwaysOverride: u32 = 4096;
pub const EcsIdHasOnAdd: u32 = 65536;
pub const EcsIdHasOnRemove: u32 = 131072;
pub const EcsIdHasOnSet: u32 = 262144;
pub const EcsIdHasUnSet: u32 = 524288;
pub const EcsIdHasOnTableFill: u32 = 1048576;
pub const EcsIdHasOnTableEmpty: u32 = 2097152;
pub const EcsIdHasOnTableCreate: u32 = 4194304;
pub const EcsIdHasOnTableDelete: u32 = 8388608;
pub const EcsIdEventMask: u32 = 16711680;
pub const EcsIdMarkedForDelete: u32 = 1073741824;
pub const EcsIterIsValid: u32 = 1;
pub const EcsIterNoData: u32 = 2;
pub const EcsIterIsInstanced: u32 = 4;
pub const EcsIterHasShared: u32 = 8;
pub const EcsIterTableOnly: u32 = 16;
pub const EcsIterEntityOptional: u32 = 32;
pub const EcsIterNoResults: u32 = 64;
pub const EcsIterIgnoreThis: u32 = 128;
pub const EcsIterMatchVar: u32 = 256;
pub const EcsIterHasCondSet: u32 = 1024;
pub const EcsIterProfile: u32 = 2048;
pub const EcsEventTableOnly: u32 = 16;
pub const EcsEventNoOnSet: u32 = 65536;
pub const EcsFilterMatchThis: u32 = 2;
pub const EcsFilterMatchOnlyThis: u32 = 4;
pub const EcsFilterMatchPrefab: u32 = 8;
pub const EcsFilterMatchDisabled: u32 = 16;
pub const EcsFilterMatchEmptyTables: u32 = 32;
pub const EcsFilterMatchAnything: u32 = 64;
pub const EcsFilterNoData: u32 = 128;
pub const EcsFilterIsInstanced: u32 = 256;
pub const EcsFilterPopulate: u32 = 512;
pub const EcsFilterHasCondSet: u32 = 1024;
pub const EcsFilterUnresolvedByName: u32 = 2048;
pub const EcsFilterHasPred: u32 = 4096;
pub const EcsFilterHasScopes: u32 = 8192;
pub const EcsTableHasBuiltins: u32 = 2;
pub const EcsTableIsPrefab: u32 = 4;
pub const EcsTableHasIsA: u32 = 8;
pub const EcsTableHasChildOf: u32 = 16;
pub const EcsTableHasName: u32 = 32;
pub const EcsTableHasPairs: u32 = 64;
pub const EcsTableHasModule: u32 = 128;
pub const EcsTableIsDisabled: u32 = 256;
pub const EcsTableHasCtors: u32 = 512;
pub const EcsTableHasDtors: u32 = 1024;
pub const EcsTableHasCopy: u32 = 2048;
pub const EcsTableHasMove: u32 = 4096;
pub const EcsTableHasUnion: u32 = 8192;
pub const EcsTableHasToggle: u32 = 16384;
pub const EcsTableHasOverrides: u32 = 32768;
pub const EcsTableHasOnAdd: u32 = 65536;
pub const EcsTableHasOnRemove: u32 = 131072;
pub const EcsTableHasOnSet: u32 = 262144;
pub const EcsTableHasUnSet: u32 = 524288;
pub const EcsTableHasOnTableFill: u32 = 1048576;
pub const EcsTableHasOnTableEmpty: u32 = 2097152;
pub const EcsTableHasOnTableCreate: u32 = 4194304;
pub const EcsTableHasOnTableDelete: u32 = 8388608;
pub const EcsTableHasTraversable: u32 = 33554432;
pub const EcsTableHasTarget: u32 = 67108864;
pub const EcsTableMarkedForDelete: u32 = 1073741824;
pub const EcsTableHasLifecycle: u32 = 1536;
pub const EcsTableIsComplex: u32 = 26112;
pub const EcsTableHasAddActions: u32 = 336392;
pub const EcsTableHasRemoveActions: u32 = 656392;
pub const EcsQueryHasRefs: u32 = 2;
pub const EcsQueryIsSubquery: u32 = 4;
pub const EcsQueryIsOrphaned: u32 = 8;
pub const EcsQueryHasOutTerms: u32 = 16;
pub const EcsQueryHasNonThisOutTerms: u32 = 32;
pub const EcsQueryHasMonitor: u32 = 64;
pub const EcsQueryTrivialIter: u32 = 128;
pub const EcsAperiodicEmptyTables: u32 = 2;
pub const EcsAperiodicComponentMonitors: u32 = 4;
pub const EcsAperiodicEmptyQueries: u32 = 16;
pub const _BSD_SOURCE: u32 = 1;
pub const _XOPEN_SOURCE: u32 = 700;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST64_MAX: i32 = -1;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const INT_FAST16_MIN: i32 = -2147483648;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST16_MAX: u32 = 2147483647;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT_FAST16_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const ecs_world_t_magic: u32 = 1701016439;
pub const ecs_stage_t_magic: u32 = 1701016435;
pub const ecs_query_t_magic: u32 = 1701016433;
pub const ecs_rule_t_magic: u32 = 1701016437;
pub const ecs_table_t_magic: u32 = 1701016436;
pub const ecs_filter_t_magic: u32 = 1701016422;
pub const ecs_trigger_t_magic: u32 = 1701016434;
pub const ecs_observer_t_magic: u32 = 1701016418;
pub const ECS_ROW_MASK: u32 = 268435455;
pub const ECS_ROW_FLAGS_MASK: i32 = -268435456;
pub const ECS_ID_FLAGS_MASK: i64 = -1152921504606846976;
pub const ECS_ENTITY_MASK: u32 = 4294967295;
pub const ECS_GENERATION_MASK: u64 = 281470681743360;
pub const ECS_COMPONENT_MASK: u64 = 1152921504606846975;
pub const EcsIterNextYield: u32 = 0;
pub const EcsIterYield: i32 = -1;
pub const EcsIterNext: u32 = 1;
pub const FLECS_SPARSE_PAGE_SIZE: u32 = 4096;
pub const ECS_STRBUF_ELEMENT_SIZE: u32 = 511;
pub const ECS_STRBUF_MAX_LIST_DEPTH: u32 = 32;
pub const ENOSTR: u32 = 100;
pub const EBFONT: u32 = 101;
pub const EBADSLT: u32 = 102;
pub const EBADRQC: u32 = 103;
pub const ENOANO: u32 = 104;
pub const ENOTBLK: u32 = 105;
pub const ECHRNG: u32 = 106;
pub const EL3HLT: u32 = 107;
pub const EL3RST: u32 = 108;
pub const ELNRNG: u32 = 109;
pub const EUNATCH: u32 = 110;
pub const ENOCSI: u32 = 111;
pub const EL2HLT: u32 = 112;
pub const EBADE: u32 = 113;
pub const EBADR: u32 = 114;
pub const EXFULL: u32 = 115;
pub const ENODATA: u32 = 116;
pub const ETIME: u32 = 117;
pub const ENOSR: u32 = 118;
pub const ENONET: u32 = 119;
pub const ENOPKG: u32 = 120;
pub const EREMOTE: u32 = 121;
pub const EADV: u32 = 122;
pub const ESRMNT: u32 = 123;
pub const ECOMM: u32 = 124;
pub const EDOTDOT: u32 = 125;
pub const ENOTUNIQ: u32 = 126;
pub const EBADFD: u32 = 127;
pub const EREMCHG: u32 = 128;
pub const ELIBACC: u32 = 129;
pub const ELIBBAD: u32 = 130;
pub const ELIBSCN: u32 = 131;
pub const ELIBMAX: u32 = 132;
pub const ELIBEXEC: u32 = 133;
pub const ERESTART: u32 = 134;
pub const ESTRPIPE: u32 = 135;
pub const EUSERS: u32 = 136;
pub const ESOCKTNOSUPPORT: u32 = 137;
pub const EOPNOTSUPP: u32 = 138;
pub const EPFNOSUPPORT: u32 = 139;
pub const ESHUTDOWN: u32 = 140;
pub const ETOOMANYREFS: u32 = 141;
pub const EHOSTDOWN: u32 = 142;
pub const EUCLEAN: u32 = 143;
pub const ENOTNAM: u32 = 144;
pub const ENAVAIL: u32 = 145;
pub const EISNAM: u32 = 146;
pub const EREMOTEIO: u32 = 147;
pub const ENOMEDIUM: u32 = 148;
pub const EMEDIUMTYPE: u32 = 149;
pub const ENOKEY: u32 = 150;
pub const EKEYEXPIRED: u32 = 151;
pub const EKEYREVOKED: u32 = 152;
pub const EKEYREJECTED: u32 = 153;
pub const ERFKILL: u32 = 154;
pub const EHWPOISON: u32 = 155;
pub const EL2NSYNC: u32 = 156;
pub const ENOTSUP: u32 = 138;
pub const EcsSelf: u32 = 2;
pub const EcsUp: u32 = 4;
pub const EcsDown: u32 = 8;
pub const EcsTraverseAll: u32 = 16;
pub const EcsCascade: u32 = 32;
pub const EcsParent: u32 = 64;
pub const EcsIsVariable: u32 = 128;
pub const EcsIsEntity: u32 = 256;
pub const EcsIsName: u32 = 512;
pub const EcsFilter: u32 = 1024;
pub const EcsTraverseFlags: u32 = 126;
pub const EcsTermMatchAny: u32 = 1;
pub const EcsTermMatchAnySrc: u32 = 2;
pub const EcsTermSrcFirstEq: u32 = 4;
pub const EcsTermSrcSecondEq: u32 = 8;
pub const EcsTermTransitive: u32 = 16;
pub const EcsTermReflexive: u32 = 32;
pub const EcsTermIdInherited: u32 = 64;
pub const EcsTermMatchDisabled: u32 = 128;
pub const EcsTermMatchPrefab: u32 = 256;
pub const flecs_iter_cache_ids: u32 = 1;
pub const flecs_iter_cache_columns: u32 = 2;
pub const flecs_iter_cache_sources: u32 = 4;
pub const flecs_iter_cache_ptrs: u32 = 8;
pub const flecs_iter_cache_match_indices: u32 = 16;
pub const flecs_iter_cache_variables: u32 = 32;
pub const flecs_iter_cache_all: u32 = 255;
pub const ECS_MAX_RECURSION: u32 = 512;
pub const ECS_MAX_TOKEN_SIZE: u32 = 256;
pub const FLECS_ID0ID_: u32 = 0;
pub const ECS_ID_FLAG_BIT: i64 = -9223372036854775808;
pub const EcsFirstUserComponentId: u32 = 8;
pub const EcsFirstUserEntityId: u32 = 384;
pub const ECS_INVALID_OPERATION: u32 = 1;
pub const ECS_INVALID_PARAMETER: u32 = 2;
pub const ECS_CONSTRAINT_VIOLATED: u32 = 3;
pub const ECS_OUT_OF_MEMORY: u32 = 4;
pub const ECS_OUT_OF_RANGE: u32 = 5;
pub const ECS_UNSUPPORTED: u32 = 6;
pub const ECS_INTERNAL_ERROR: u32 = 7;
pub const ECS_ALREADY_DEFINED: u32 = 8;
pub const ECS_MISSING_OS_API: u32 = 9;
pub const ECS_OPERATION_FAILED: u32 = 10;
pub const ECS_INVALID_CONVERSION: u32 = 11;
pub const ECS_ID_IN_USE: u32 = 12;
pub const ECS_CYCLE_DETECTED: u32 = 13;
pub const ECS_LEAK_DETECTED: u32 = 14;
pub const ECS_DOUBLE_FREE: u32 = 15;
pub const ECS_INCONSISTENT_NAME: u32 = 20;
pub const ECS_NAME_IN_USE: u32 = 21;
pub const ECS_NOT_A_COMPONENT: u32 = 22;
pub const ECS_INVALID_COMPONENT_SIZE: u32 = 23;
pub const ECS_INVALID_COMPONENT_ALIGNMENT: u32 = 24;
pub const ECS_COMPONENT_NOT_REGISTERED: u32 = 25;
pub const ECS_INCONSISTENT_COMPONENT_ID: u32 = 26;
pub const ECS_INCONSISTENT_COMPONENT_ACTION: u32 = 27;
pub const ECS_MODULE_UNDEFINED: u32 = 28;
pub const ECS_MISSING_SYMBOL: u32 = 29;
pub const ECS_ALREADY_IN_USE: u32 = 30;
pub const ECS_ACCESS_VIOLATION: u32 = 40;
pub const ECS_COLUMN_INDEX_OUT_OF_RANGE: u32 = 41;
pub const ECS_COLUMN_IS_NOT_SHARED: u32 = 42;
pub const ECS_COLUMN_IS_SHARED: u32 = 43;
pub const ECS_COLUMN_TYPE_MISMATCH: u32 = 45;
pub const ECS_INVALID_WHILE_READONLY: u32 = 70;
pub const ECS_LOCKED_STORAGE: u32 = 71;
pub const ECS_INVALID_FROM_WORKER: u32 = 72;
pub const ECS_BLACK: &[u8; 8usize] = b"\x1B[1;30m\0";
pub const ECS_RED: &[u8; 8usize] = b"\x1B[0;31m\0";
pub const ECS_GREEN: &[u8; 8usize] = b"\x1B[0;32m\0";
pub const ECS_YELLOW: &[u8; 8usize] = b"\x1B[0;33m\0";
pub const ECS_BLUE: &[u8; 8usize] = b"\x1B[0;34m\0";
pub const ECS_MAGENTA: &[u8; 8usize] = b"\x1B[0;35m\0";
pub const ECS_CYAN: &[u8; 8usize] = b"\x1B[0;36m\0";
pub const ECS_WHITE: &[u8; 8usize] = b"\x1B[1;37m\0";
pub const ECS_GREY: &[u8; 8usize] = b"\x1B[0;37m\0";
pub const ECS_NORMAL: &[u8; 8usize] = b"\x1B[0;49m\0";
pub const ECS_BOLD: &[u8; 8usize] = b"\x1B[1;49m\0";
pub const ECS_HTTP_HEADER_COUNT_MAX: u32 = 32;
pub const ECS_HTTP_QUERY_PARAM_COUNT_MAX: u32 = 32;
pub const ECS_REST_DEFAULT_PORT: u32 = 27750;
pub const ECS_STAT_WINDOW: u32 = 60;
pub const ECS_ALERT_MAX_SEVERITY_FILTERS: u32 = 4;
pub const ECS_MEMBER_DESC_CACHE_SIZE: u32 = 32;
pub const ECS_META_MAX_SCOPE_DEPTH: u32 = 32;
extern "C" {
    pub fn __assert_fail(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    );
}
pub type va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    _unused: [u8; 0],
}
pub type locale_t = *mut __locale_struct;
extern "C" {
    pub fn memcpy(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strchr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtok_r(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stpcpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(arg1: *const ::std::os::raw::c_char, arg2: usize) -> usize;
}
extern "C" {
    pub fn strdup(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn memmem(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        arg3: *const ::std::os::raw::c_void,
        arg4: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strsep(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> usize;
}
extern "C" {
    pub fn strlcpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> usize;
}
extern "C" {
    pub fn explicit_bzero(arg1: *mut ::std::os::raw::c_void, arg2: usize);
}
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = i8;
pub type int_fast64_t = i64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast64_t = u64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast16_t = i32;
pub type int_fast32_t = i32;
pub type uint_fast16_t = u32;
pub type uint_fast32_t = u32;
pub type ecs_flags8_t = u8;
pub type ecs_flags16_t = u16;
pub type ecs_flags32_t = u32;
pub type ecs_flags64_t = u64;
pub type ecs_size_t = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_vec_t {
    pub array: *mut ::std::os::raw::c_void,
    pub count: i32,
    pub size: i32,
    pub elem_size: ecs_size_t,
}
extern "C" {
    pub fn ecs_vec_init(
        allocator: *mut ecs_allocator_t,
        vec: *mut ecs_vec_t,
        size: ecs_size_t,
        elem_count: i32,
    ) -> *mut ecs_vec_t;
}
extern "C" {
    pub fn ecs_vec_init_if(vec: *mut ecs_vec_t, size: ecs_size_t);
}
extern "C" {
    pub fn ecs_vec_fini(allocator: *mut ecs_allocator_t, vec: *mut ecs_vec_t, size: ecs_size_t);
}
extern "C" {
    pub fn ecs_vec_reset(
        allocator: *mut ecs_allocator_t,
        vec: *mut ecs_vec_t,
        size: ecs_size_t,
    ) -> *mut ecs_vec_t;
}
extern "C" {
    pub fn ecs_vec_clear(vec: *mut ecs_vec_t);
}
extern "C" {
    pub fn ecs_vec_append(
        allocator: *mut ecs_allocator_t,
        vec: *mut ecs_vec_t,
        size: ecs_size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_vec_remove(vec: *mut ecs_vec_t, size: ecs_size_t, elem: i32);
}
extern "C" {
    pub fn ecs_vec_remove_last(vec: *mut ecs_vec_t);
}
extern "C" {
    pub fn ecs_vec_copy(
        allocator: *mut ecs_allocator_t,
        vec: *const ecs_vec_t,
        size: ecs_size_t,
    ) -> ecs_vec_t;
}
extern "C" {
    pub fn ecs_vec_reclaim(allocator: *mut ecs_allocator_t, vec: *mut ecs_vec_t, size: ecs_size_t);
}
extern "C" {
    pub fn ecs_vec_set_size(
        allocator: *mut ecs_allocator_t,
        vec: *mut ecs_vec_t,
        size: ecs_size_t,
        elem_count: i32,
    );
}
extern "C" {
    pub fn ecs_vec_set_min_size(
        allocator: *mut ecs_allocator_t,
        vec: *mut ecs_vec_t,
        size: ecs_size_t,
        elem_count: i32,
    );
}
extern "C" {
    pub fn ecs_vec_set_min_count(
        allocator: *mut ecs_allocator_t,
        vec: *mut ecs_vec_t,
        size: ecs_size_t,
        elem_count: i32,
    );
}
extern "C" {
    pub fn ecs_vec_set_min_count_zeromem(
        allocator: *mut ecs_allocator_t,
        vec: *mut ecs_vec_t,
        size: ecs_size_t,
        elem_count: i32,
    );
}
extern "C" {
    pub fn ecs_vec_set_count(
        allocator: *mut ecs_allocator_t,
        vec: *mut ecs_vec_t,
        size: ecs_size_t,
        elem_count: i32,
    );
}
extern "C" {
    pub fn ecs_vec_grow(
        allocator: *mut ecs_allocator_t,
        vec: *mut ecs_vec_t,
        size: ecs_size_t,
        elem_count: i32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_vec_count(vec: *const ecs_vec_t) -> i32;
}
extern "C" {
    pub fn ecs_vec_size(vec: *const ecs_vec_t) -> i32;
}
extern "C" {
    pub fn ecs_vec_get(
        vec: *const ecs_vec_t,
        size: ecs_size_t,
        index: i32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_vec_first(vec: *const ecs_vec_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_vec_last(vec: *const ecs_vec_t, size: ecs_size_t) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_sparse_t {
    pub dense: ecs_vec_t,
    pub pages: ecs_vec_t,
    pub size: ecs_size_t,
    pub count: i32,
    pub max_id: u64,
    pub allocator: *mut ecs_allocator_t,
    pub page_allocator: *mut ecs_block_allocator_t,
}
extern "C" {
    pub fn flecs_sparse_init(
        sparse: *mut ecs_sparse_t,
        allocator: *mut ecs_allocator_t,
        page_allocator: *mut ecs_block_allocator_t,
        elem_size: ecs_size_t,
    );
}
extern "C" {
    pub fn flecs_sparse_fini(sparse: *mut ecs_sparse_t);
}
extern "C" {
    pub fn flecs_sparse_clear(sparse: *mut ecs_sparse_t);
}
extern "C" {
    pub fn flecs_sparse_add(
        sparse: *mut ecs_sparse_t,
        elem_size: ecs_size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flecs_sparse_last_id(sparse: *const ecs_sparse_t) -> u64;
}
extern "C" {
    pub fn flecs_sparse_new_id(sparse: *mut ecs_sparse_t) -> u64;
}
extern "C" {
    pub fn flecs_sparse_remove(sparse: *mut ecs_sparse_t, elem_size: ecs_size_t, id: u64);
}
extern "C" {
    pub fn flecs_sparse_is_alive(sparse: *const ecs_sparse_t, id: u64) -> bool;
}
extern "C" {
    pub fn flecs_sparse_get_dense(
        sparse: *const ecs_sparse_t,
        elem_size: ecs_size_t,
        index: i32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flecs_sparse_count(sparse: *const ecs_sparse_t) -> i32;
}
extern "C" {
    pub fn flecs_sparse_get(
        sparse: *const ecs_sparse_t,
        elem_size: ecs_size_t,
        id: u64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flecs_sparse_try(
        sparse: *const ecs_sparse_t,
        elem_size: ecs_size_t,
        id: u64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flecs_sparse_get_any(
        sparse: *const ecs_sparse_t,
        elem_size: ecs_size_t,
        id: u64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flecs_sparse_ensure(
        sparse: *mut ecs_sparse_t,
        elem_size: ecs_size_t,
        id: u64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flecs_sparse_ensure_fast(
        sparse: *mut ecs_sparse_t,
        elem_size: ecs_size_t,
        id: u64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flecs_sparse_ids(sparse: *const ecs_sparse_t) -> *const u64;
}
extern "C" {
    pub fn ecs_sparse_init(sparse: *mut ecs_sparse_t, elem_size: ecs_size_t);
}
extern "C" {
    pub fn ecs_sparse_add(
        sparse: *mut ecs_sparse_t,
        elem_size: ecs_size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_sparse_last_id(sparse: *const ecs_sparse_t) -> u64;
}
extern "C" {
    pub fn ecs_sparse_count(sparse: *const ecs_sparse_t) -> i32;
}
extern "C" {
    pub fn flecs_sparse_set_generation(sparse: *mut ecs_sparse_t, id: u64);
}
extern "C" {
    pub fn ecs_sparse_get_dense(
        sparse: *const ecs_sparse_t,
        elem_size: ecs_size_t,
        index: i32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_sparse_get(
        sparse: *const ecs_sparse_t,
        elem_size: ecs_size_t,
        id: u64,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_block_allocator_block_t {
    pub memory: *mut ::std::os::raw::c_void,
    pub next: *mut ecs_block_allocator_block_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_block_allocator_chunk_header_t {
    pub next: *mut ecs_block_allocator_chunk_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_block_allocator_t {
    pub head: *mut ecs_block_allocator_chunk_header_t,
    pub block_head: *mut ecs_block_allocator_block_t,
    pub block_tail: *mut ecs_block_allocator_block_t,
    pub chunk_size: i32,
    pub data_size: i32,
    pub chunks_per_block: i32,
    pub block_size: i32,
    pub alloc_count: i32,
}
extern "C" {
    pub fn flecs_ballocator_init(ba: *mut ecs_block_allocator_t, size: ecs_size_t);
}
extern "C" {
    pub fn flecs_ballocator_new(size: ecs_size_t) -> *mut ecs_block_allocator_t;
}
extern "C" {
    pub fn flecs_ballocator_fini(ba: *mut ecs_block_allocator_t);
}
extern "C" {
    pub fn flecs_ballocator_free(ba: *mut ecs_block_allocator_t);
}
extern "C" {
    pub fn flecs_balloc(allocator: *mut ecs_block_allocator_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flecs_bcalloc(allocator: *mut ecs_block_allocator_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flecs_bfree(allocator: *mut ecs_block_allocator_t, memory: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn flecs_brealloc(
        dst: *mut ecs_block_allocator_t,
        src: *mut ecs_block_allocator_t,
        memory: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flecs_bdup(
        ba: *mut ecs_block_allocator_t,
        memory: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
pub type ecs_map_data_t = u64;
pub type ecs_map_key_t = ecs_map_data_t;
pub type ecs_map_val_t = ecs_map_data_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_bucket_entry_t {
    pub key: ecs_map_key_t,
    pub value: ecs_map_val_t,
    pub next: *mut ecs_bucket_entry_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_bucket_t {
    pub first: *mut ecs_bucket_entry_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_map_t {
    pub bucket_shift: u8,
    pub shared_allocator: bool,
    pub buckets: *mut ecs_bucket_t,
    pub bucket_count: i32,
    pub count: i32,
    pub entry_allocator: *mut ecs_block_allocator_t,
    pub allocator: *mut ecs_allocator_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_map_iter_t {
    pub map: *const ecs_map_t,
    pub bucket: *mut ecs_bucket_t,
    pub entry: *mut ecs_bucket_entry_t,
    pub res: *mut ecs_map_data_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_map_params_t {
    pub allocator: *mut ecs_allocator_t,
    pub entry_allocator: ecs_block_allocator_t,
}
extern "C" {
    pub fn ecs_map_params_init(params: *mut ecs_map_params_t, allocator: *mut ecs_allocator_t);
}
extern "C" {
    pub fn ecs_map_params_fini(params: *mut ecs_map_params_t);
}
extern "C" {
    pub fn ecs_map_init(map: *mut ecs_map_t, allocator: *mut ecs_allocator_t);
}
extern "C" {
    pub fn ecs_map_init_w_params(map: *mut ecs_map_t, params: *mut ecs_map_params_t);
}
extern "C" {
    pub fn ecs_map_init_if(map: *mut ecs_map_t, allocator: *mut ecs_allocator_t);
}
extern "C" {
    pub fn ecs_map_init_w_params_if(result: *mut ecs_map_t, params: *mut ecs_map_params_t);
}
extern "C" {
    pub fn ecs_map_fini(map: *mut ecs_map_t);
}
extern "C" {
    pub fn ecs_map_get(map: *const ecs_map_t, key: ecs_map_key_t) -> *mut ecs_map_val_t;
}
extern "C" {
    pub fn ecs_map_get_deref_(
        map: *const ecs_map_t,
        key: ecs_map_key_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_map_ensure(map: *mut ecs_map_t, key: ecs_map_key_t) -> *mut ecs_map_val_t;
}
extern "C" {
    pub fn ecs_map_ensure_alloc(
        map: *mut ecs_map_t,
        elem_size: ecs_size_t,
        key: ecs_map_key_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_map_insert(map: *mut ecs_map_t, key: ecs_map_key_t, value: ecs_map_val_t);
}
extern "C" {
    pub fn ecs_map_insert_alloc(
        map: *mut ecs_map_t,
        elem_size: ecs_size_t,
        key: ecs_map_key_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_map_remove(map: *mut ecs_map_t, key: ecs_map_key_t) -> ecs_map_val_t;
}
extern "C" {
    pub fn ecs_map_remove_free(map: *mut ecs_map_t, key: ecs_map_key_t);
}
extern "C" {
    pub fn ecs_map_clear(map: *mut ecs_map_t);
}
extern "C" {
    pub fn ecs_map_iter(map: *const ecs_map_t) -> ecs_map_iter_t;
}
extern "C" {
    pub fn ecs_map_next(iter: *mut ecs_map_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_map_copy(dst: *mut ecs_map_t, src: *const ecs_map_t);
}
extern "C" {
    pub static mut ecs_block_allocator_alloc_count: i64;
}
extern "C" {
    pub static mut ecs_block_allocator_free_count: i64;
}
extern "C" {
    pub static mut ecs_stack_allocator_alloc_count: i64;
}
extern "C" {
    pub static mut ecs_stack_allocator_free_count: i64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_allocator_t {
    pub chunks: ecs_block_allocator_t,
    pub sizes: ecs_sparse_t,
}
extern "C" {
    pub fn flecs_allocator_init(a: *mut ecs_allocator_t);
}
extern "C" {
    pub fn flecs_allocator_fini(a: *mut ecs_allocator_t);
}
extern "C" {
    pub fn flecs_allocator_get(
        a: *mut ecs_allocator_t,
        size: ecs_size_t,
    ) -> *mut ecs_block_allocator_t;
}
extern "C" {
    pub fn flecs_strdup(
        a: *mut ecs_allocator_t,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flecs_strfree(a: *mut ecs_allocator_t, str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn flecs_dup(
        a: *mut ecs_allocator_t,
        size: ecs_size_t,
        src: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_strbuf_element {
    pub buffer_embedded: bool,
    pub pos: i32,
    pub buf: *mut ::std::os::raw::c_char,
    pub next: *mut ecs_strbuf_element,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_strbuf_element_embedded {
    pub super_: ecs_strbuf_element,
    pub buf: [::std::os::raw::c_char; 512usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_strbuf_element_str {
    pub super_: ecs_strbuf_element,
    pub alloc_str: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_strbuf_list_elem {
    pub count: i32,
    pub separator: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_strbuf_t {
    pub buf: *mut ::std::os::raw::c_char,
    pub max: i32,
    pub size: i32,
    pub elementCount: i32,
    pub firstElement: ecs_strbuf_element_embedded,
    pub current: *mut ecs_strbuf_element,
    pub list_stack: [ecs_strbuf_list_elem; 32usize],
    pub list_sp: i32,
    pub content: *mut ::std::os::raw::c_char,
    pub length: i32,
}
extern "C" {
    pub fn ecs_strbuf_append(
        buffer: *mut ecs_strbuf_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_vappend(
        buffer: *mut ecs_strbuf_t,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_appendstr(
        buffer: *mut ecs_strbuf_t,
        str_: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_appendch(buffer: *mut ecs_strbuf_t, ch: ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_appendint(buffer: *mut ecs_strbuf_t, v: i64) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_appendflt(
        buffer: *mut ecs_strbuf_t,
        v: f64,
        nan_delim: ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_mergebuff(
        dst_buffer: *mut ecs_strbuf_t,
        src_buffer: *mut ecs_strbuf_t,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_appendstr_zerocpy(
        buffer: *mut ecs_strbuf_t,
        str_: *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_appendstr_zerocpyn(
        buffer: *mut ecs_strbuf_t,
        str_: *mut ::std::os::raw::c_char,
        n: i32,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_appendstr_zerocpy_const(
        buffer: *mut ecs_strbuf_t,
        str_: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_appendstr_zerocpyn_const(
        buffer: *mut ecs_strbuf_t,
        str_: *const ::std::os::raw::c_char,
        n: i32,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_appendstrn(
        buffer: *mut ecs_strbuf_t,
        str_: *const ::std::os::raw::c_char,
        n: i32,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_get(buffer: *mut ecs_strbuf_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_strbuf_get_small(buffer: *mut ecs_strbuf_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_strbuf_reset(buffer: *mut ecs_strbuf_t);
}
extern "C" {
    pub fn ecs_strbuf_list_push(
        buffer: *mut ecs_strbuf_t,
        list_open: *const ::std::os::raw::c_char,
        separator: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_strbuf_list_pop(
        buffer: *mut ecs_strbuf_t,
        list_close: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_strbuf_list_next(buffer: *mut ecs_strbuf_t);
}
extern "C" {
    pub fn ecs_strbuf_list_appendch(buffer: *mut ecs_strbuf_t, ch: ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_list_append(
        buffer: *mut ecs_strbuf_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_list_appendstr(
        buffer: *mut ecs_strbuf_t,
        str_: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_list_appendstrn(
        buffer: *mut ecs_strbuf_t,
        str_: *const ::std::os::raw::c_char,
        n: i32,
    ) -> bool;
}
extern "C" {
    pub fn ecs_strbuf_written(buffer: *const ecs_strbuf_t) -> i32;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __ll: ::std::os::raw::c_longlong,
    pub __ld: u128,
}
pub type __wasi_size_t = ::std::os::raw::c_ulong;
pub type __wasi_filesize_t = u64;
pub type __wasi_timestamp_t = u64;
pub type __wasi_clockid_t = u32;
pub type __wasi_errno_t = u16;
pub type __wasi_rights_t = u64;
pub type __wasi_fd_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wasi_iovec_t {
    pub buf: *mut u8,
    pub buf_len: __wasi_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wasi_ciovec_t {
    pub buf: *const u8,
    pub buf_len: __wasi_size_t,
}
pub type __wasi_filedelta_t = i64;
pub type __wasi_whence_t = u8;
pub type __wasi_dircookie_t = u64;
pub type __wasi_dirnamlen_t = u32;
pub type __wasi_inode_t = u64;
pub type __wasi_filetype_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wasi_dirent_t {
    pub d_next: __wasi_dircookie_t,
    pub d_ino: __wasi_inode_t,
    pub d_namlen: __wasi_dirnamlen_t,
    pub d_type: __wasi_filetype_t,
}
pub type __wasi_advice_t = u8;
pub type __wasi_fdflags_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wasi_fdstat_t {
    pub fs_filetype: __wasi_filetype_t,
    pub fs_flags: __wasi_fdflags_t,
    pub fs_rights_base: __wasi_rights_t,
    pub fs_rights_inheriting: __wasi_rights_t,
}
pub type __wasi_device_t = u64;
pub type __wasi_fstflags_t = u16;
pub type __wasi_lookupflags_t = u32;
pub type __wasi_oflags_t = u16;
pub type __wasi_linkcount_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wasi_filestat_t {
    pub dev: __wasi_device_t,
    pub ino: __wasi_inode_t,
    pub filetype: __wasi_filetype_t,
    pub nlink: __wasi_linkcount_t,
    pub size: __wasi_filesize_t,
    pub atim: __wasi_timestamp_t,
    pub mtim: __wasi_timestamp_t,
    pub ctim: __wasi_timestamp_t,
}
pub type __wasi_userdata_t = u64;
pub type __wasi_eventtype_t = u8;
pub type __wasi_eventrwflags_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wasi_event_fd_readwrite_t {
    pub nbytes: __wasi_filesize_t,
    pub flags: __wasi_eventrwflags_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __wasi_event_u_t {
    pub fd_readwrite: __wasi_event_fd_readwrite_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __wasi_event_t {
    pub userdata: __wasi_userdata_t,
    pub error: __wasi_errno_t,
    pub type_: __wasi_eventtype_t,
    pub u: __wasi_event_u_t,
}
pub type __wasi_subclockflags_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wasi_subscription_clock_t {
    pub id: __wasi_clockid_t,
    pub timeout: __wasi_timestamp_t,
    pub precision: __wasi_timestamp_t,
    pub flags: __wasi_subclockflags_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wasi_subscription_fd_readwrite_t {
    pub file_descriptor: __wasi_fd_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __wasi_subscription_u_t {
    pub clock: __wasi_subscription_clock_t,
    pub fd_readwrite: __wasi_subscription_fd_readwrite_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __wasi_subscription_t {
    pub userdata: __wasi_userdata_t,
    pub type_: __wasi_eventtype_t,
    pub u: __wasi_subscription_u_t,
}
pub type __wasi_exitcode_t = u32;
pub type __wasi_signal_t = u8;
pub type __wasi_riflags_t = u16;
pub type __wasi_roflags_t = u16;
pub type __wasi_siflags_t = u16;
pub type __wasi_sdflags_t = u8;
pub type __wasi_preopentype_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wasi_prestat_dir_t {
    pub pr_name_len: __wasi_size_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __wasi_prestat_u_t {
    pub dir: __wasi_prestat_dir_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __wasi_prestat_t {
    pub pr_type: __wasi_preopentype_t,
    pub u: __wasi_prestat_u_t,
}
extern "C" {
    pub fn __wasi_args_get(argv: *mut *mut u8, argv_buf: *mut u8) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_args_sizes_get(
        argc: *mut __wasi_size_t,
        argv_buf_size: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_environ_get(environ: *mut *mut u8, environ_buf: *mut u8) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_environ_sizes_get(
        argc: *mut __wasi_size_t,
        argv_buf_size: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_clock_res_get(
        id: __wasi_clockid_t,
        resolution: *mut __wasi_timestamp_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_clock_time_get(
        id: __wasi_clockid_t,
        precision: __wasi_timestamp_t,
        time: *mut __wasi_timestamp_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_advise(
        fd: __wasi_fd_t,
        offset: __wasi_filesize_t,
        len: __wasi_filesize_t,
        advice: __wasi_advice_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_allocate(
        fd: __wasi_fd_t,
        offset: __wasi_filesize_t,
        len: __wasi_filesize_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_close(fd: __wasi_fd_t) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_datasync(fd: __wasi_fd_t) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_fdstat_get(fd: __wasi_fd_t, stat: *mut __wasi_fdstat_t) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_fdstat_set_flags(fd: __wasi_fd_t, flags: __wasi_fdflags_t) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_fdstat_set_rights(
        fd: __wasi_fd_t,
        fs_rights_base: __wasi_rights_t,
        fs_rights_inheriting: __wasi_rights_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_filestat_get(fd: __wasi_fd_t, buf: *mut __wasi_filestat_t) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_filestat_set_size(fd: __wasi_fd_t, size: __wasi_filesize_t) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_filestat_set_times(
        fd: __wasi_fd_t,
        atim: __wasi_timestamp_t,
        mtim: __wasi_timestamp_t,
        fst_flags: __wasi_fstflags_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_pread(
        fd: __wasi_fd_t,
        iovs: *const __wasi_iovec_t,
        iovs_len: usize,
        offset: __wasi_filesize_t,
        nread: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_prestat_get(fd: __wasi_fd_t, buf: *mut __wasi_prestat_t) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_prestat_dir_name(
        fd: __wasi_fd_t,
        path: *mut u8,
        path_len: __wasi_size_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_pwrite(
        fd: __wasi_fd_t,
        iovs: *const __wasi_ciovec_t,
        iovs_len: usize,
        offset: __wasi_filesize_t,
        nwritten: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_read(
        fd: __wasi_fd_t,
        iovs: *const __wasi_iovec_t,
        iovs_len: usize,
        nread: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_readdir(
        fd: __wasi_fd_t,
        buf: *mut u8,
        buf_len: __wasi_size_t,
        cookie: __wasi_dircookie_t,
        bufused: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_renumber(fd: __wasi_fd_t, to: __wasi_fd_t) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_seek(
        fd: __wasi_fd_t,
        offset: __wasi_filedelta_t,
        whence: __wasi_whence_t,
        newoffset: *mut __wasi_filesize_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_sync(fd: __wasi_fd_t) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_tell(fd: __wasi_fd_t, offset: *mut __wasi_filesize_t) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_fd_write(
        fd: __wasi_fd_t,
        iovs: *const __wasi_ciovec_t,
        iovs_len: usize,
        nwritten: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_path_create_directory(
        fd: __wasi_fd_t,
        path: *const ::std::os::raw::c_char,
        path_len: usize,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_path_filestat_get(
        fd: __wasi_fd_t,
        flags: __wasi_lookupflags_t,
        path: *const ::std::os::raw::c_char,
        path_len: usize,
        buf: *mut __wasi_filestat_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_path_filestat_set_times(
        fd: __wasi_fd_t,
        flags: __wasi_lookupflags_t,
        path: *const ::std::os::raw::c_char,
        path_len: usize,
        atim: __wasi_timestamp_t,
        mtim: __wasi_timestamp_t,
        fst_flags: __wasi_fstflags_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_path_link(
        old_fd: __wasi_fd_t,
        old_flags: __wasi_lookupflags_t,
        old_path: *const ::std::os::raw::c_char,
        old_path_len: usize,
        new_fd: __wasi_fd_t,
        new_path: *const ::std::os::raw::c_char,
        new_path_len: usize,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_path_open(
        fd: __wasi_fd_t,
        dirflags: __wasi_lookupflags_t,
        path: *const ::std::os::raw::c_char,
        path_len: usize,
        oflags: __wasi_oflags_t,
        fs_rights_base: __wasi_rights_t,
        fs_rights_inherting: __wasi_rights_t,
        fdflags: __wasi_fdflags_t,
        opened_fd: *mut __wasi_fd_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_path_readlink(
        fd: __wasi_fd_t,
        path: *const ::std::os::raw::c_char,
        path_len: usize,
        buf: *mut u8,
        buf_len: __wasi_size_t,
        bufused: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_path_remove_directory(
        fd: __wasi_fd_t,
        path: *const ::std::os::raw::c_char,
        path_len: usize,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_path_rename(
        fd: __wasi_fd_t,
        old_path: *const ::std::os::raw::c_char,
        old_path_len: usize,
        new_fd: __wasi_fd_t,
        new_path: *const ::std::os::raw::c_char,
        new_path_len: usize,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_path_symlink(
        old_path: *const ::std::os::raw::c_char,
        old_path_len: usize,
        fd: __wasi_fd_t,
        new_path: *const ::std::os::raw::c_char,
        new_path_len: usize,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_path_unlink_file(
        fd: __wasi_fd_t,
        path: *const ::std::os::raw::c_char,
        path_len: usize,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_poll_oneoff(
        in_: *const __wasi_subscription_t,
        out: *mut __wasi_event_t,
        nsubscriptions: __wasi_size_t,
        nevents: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_proc_exit(rval: __wasi_exitcode_t);
}
extern "C" {
    pub fn __wasi_proc_raise(sig: __wasi_signal_t) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_sched_yield() -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_random_get(buf: *mut u8, buf_len: __wasi_size_t) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_sock_recv(
        fd: __wasi_fd_t,
        ri_data: *const __wasi_iovec_t,
        ri_data_len: usize,
        ri_flags: __wasi_riflags_t,
        ro_datalen: *mut __wasi_size_t,
        ro_flags: *mut __wasi_roflags_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_sock_send(
        fd: __wasi_fd_t,
        si_data: *const __wasi_ciovec_t,
        si_data_len: usize,
        si_flags: __wasi_siflags_t,
        so_datalen: *mut __wasi_size_t,
    ) -> __wasi_errno_t;
}
extern "C" {
    pub fn __wasi_sock_shutdown(fd: __wasi_fd_t, how: __wasi_sdflags_t) -> __wasi_errno_t;
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_time_t {
    pub sec: u32,
    pub nanosec: u32,
}
extern "C" {
    pub static mut ecs_os_api_malloc_count: i64;
}
extern "C" {
    pub static mut ecs_os_api_realloc_count: i64;
}
extern "C" {
    pub static mut ecs_os_api_calloc_count: i64;
}
extern "C" {
    pub static mut ecs_os_api_free_count: i64;
}
pub type ecs_os_thread_t = usize;
pub type ecs_os_cond_t = usize;
pub type ecs_os_mutex_t = usize;
pub type ecs_os_dl_t = usize;
pub type ecs_os_sock_t = usize;
pub type ecs_os_thread_id_t = u64;
pub type ecs_os_proc_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type ecs_os_api_init_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type ecs_os_api_fini_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type ecs_os_api_malloc_t =
    ::std::option::Option<unsafe extern "C" fn(size: ecs_size_t) -> *mut ::std::os::raw::c_void>;
pub type ecs_os_api_free_t =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
pub type ecs_os_api_realloc_t = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        size: ecs_size_t,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type ecs_os_api_calloc_t =
    ::std::option::Option<unsafe extern "C" fn(size: ecs_size_t) -> *mut ::std::os::raw::c_void>;
pub type ecs_os_api_strdup_t = ::std::option::Option<
    unsafe extern "C" fn(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
>;
pub type ecs_os_thread_callback_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type ecs_os_api_thread_new_t = ::std::option::Option<
    unsafe extern "C" fn(
        callback: ecs_os_thread_callback_t,
        param: *mut ::std::os::raw::c_void,
    ) -> ecs_os_thread_t,
>;
pub type ecs_os_api_thread_join_t = ::std::option::Option<
    unsafe extern "C" fn(thread: ecs_os_thread_t) -> *mut ::std::os::raw::c_void,
>;
pub type ecs_os_api_thread_self_t =
    ::std::option::Option<unsafe extern "C" fn() -> ecs_os_thread_id_t>;
pub type ecs_os_api_task_new_t = ::std::option::Option<
    unsafe extern "C" fn(
        callback: ecs_os_thread_callback_t,
        param: *mut ::std::os::raw::c_void,
    ) -> ecs_os_thread_t,
>;
pub type ecs_os_api_task_join_t = ::std::option::Option<
    unsafe extern "C" fn(thread: ecs_os_thread_t) -> *mut ::std::os::raw::c_void,
>;
pub type ecs_os_api_ainc_t = ::std::option::Option<unsafe extern "C" fn(value: *mut i32) -> i32>;
pub type ecs_os_api_lainc_t = ::std::option::Option<unsafe extern "C" fn(value: *mut i64) -> i64>;
pub type ecs_os_api_mutex_new_t = ::std::option::Option<unsafe extern "C" fn() -> ecs_os_mutex_t>;
pub type ecs_os_api_mutex_lock_t =
    ::std::option::Option<unsafe extern "C" fn(mutex: ecs_os_mutex_t)>;
pub type ecs_os_api_mutex_unlock_t =
    ::std::option::Option<unsafe extern "C" fn(mutex: ecs_os_mutex_t)>;
pub type ecs_os_api_mutex_free_t =
    ::std::option::Option<unsafe extern "C" fn(mutex: ecs_os_mutex_t)>;
pub type ecs_os_api_cond_new_t = ::std::option::Option<unsafe extern "C" fn() -> ecs_os_cond_t>;
pub type ecs_os_api_cond_free_t = ::std::option::Option<unsafe extern "C" fn(cond: ecs_os_cond_t)>;
pub type ecs_os_api_cond_signal_t =
    ::std::option::Option<unsafe extern "C" fn(cond: ecs_os_cond_t)>;
pub type ecs_os_api_cond_broadcast_t =
    ::std::option::Option<unsafe extern "C" fn(cond: ecs_os_cond_t)>;
pub type ecs_os_api_cond_wait_t =
    ::std::option::Option<unsafe extern "C" fn(cond: ecs_os_cond_t, mutex: ecs_os_mutex_t)>;
pub type ecs_os_api_sleep_t = ::std::option::Option<unsafe extern "C" fn(sec: i32, nanosec: i32)>;
pub type ecs_os_api_enable_high_timer_resolution_t =
    ::std::option::Option<unsafe extern "C" fn(enable: bool)>;
pub type ecs_os_api_get_time_t =
    ::std::option::Option<unsafe extern "C" fn(time_out: *mut ecs_time_t)>;
pub type ecs_os_api_now_t = ::std::option::Option<unsafe extern "C" fn() -> u64>;
pub type ecs_os_api_log_t = ::std::option::Option<
    unsafe extern "C" fn(
        level: i32,
        file: *const ::std::os::raw::c_char,
        line: i32,
        msg: *const ::std::os::raw::c_char,
    ),
>;
pub type ecs_os_api_abort_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type ecs_os_api_dlopen_t = ::std::option::Option<
    unsafe extern "C" fn(libname: *const ::std::os::raw::c_char) -> ecs_os_dl_t,
>;
pub type ecs_os_api_dlproc_t = ::std::option::Option<
    unsafe extern "C" fn(
        lib: ecs_os_dl_t,
        procname: *const ::std::os::raw::c_char,
    ) -> ecs_os_proc_t,
>;
pub type ecs_os_api_dlclose_t = ::std::option::Option<unsafe extern "C" fn(lib: ecs_os_dl_t)>;
pub type ecs_os_api_module_to_path_t = ::std::option::Option<
    unsafe extern "C" fn(module_id: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_os_api_t {
    pub init_: ecs_os_api_init_t,
    pub fini_: ecs_os_api_fini_t,
    pub malloc_: ecs_os_api_malloc_t,
    pub realloc_: ecs_os_api_realloc_t,
    pub calloc_: ecs_os_api_calloc_t,
    pub free_: ecs_os_api_free_t,
    pub strdup_: ecs_os_api_strdup_t,
    pub thread_new_: ecs_os_api_thread_new_t,
    pub thread_join_: ecs_os_api_thread_join_t,
    pub thread_self_: ecs_os_api_thread_self_t,
    pub task_new_: ecs_os_api_thread_new_t,
    pub task_join_: ecs_os_api_thread_join_t,
    pub ainc_: ecs_os_api_ainc_t,
    pub adec_: ecs_os_api_ainc_t,
    pub lainc_: ecs_os_api_lainc_t,
    pub ladec_: ecs_os_api_lainc_t,
    pub mutex_new_: ecs_os_api_mutex_new_t,
    pub mutex_free_: ecs_os_api_mutex_free_t,
    pub mutex_lock_: ecs_os_api_mutex_lock_t,
    pub mutex_unlock_: ecs_os_api_mutex_lock_t,
    pub cond_new_: ecs_os_api_cond_new_t,
    pub cond_free_: ecs_os_api_cond_free_t,
    pub cond_signal_: ecs_os_api_cond_signal_t,
    pub cond_broadcast_: ecs_os_api_cond_broadcast_t,
    pub cond_wait_: ecs_os_api_cond_wait_t,
    pub sleep_: ecs_os_api_sleep_t,
    pub now_: ecs_os_api_now_t,
    pub get_time_: ecs_os_api_get_time_t,
    pub log_: ecs_os_api_log_t,
    pub abort_: ecs_os_api_abort_t,
    pub dlopen_: ecs_os_api_dlopen_t,
    pub dlproc_: ecs_os_api_dlproc_t,
    pub dlclose_: ecs_os_api_dlclose_t,
    pub module_to_dl_: ecs_os_api_module_to_path_t,
    pub module_to_etc_: ecs_os_api_module_to_path_t,
    pub log_level_: i32,
    pub log_indent_: i32,
    pub log_last_error_: i32,
    pub log_last_timestamp_: i64,
    pub flags_: ecs_flags32_t,
}
extern "C" {
    pub static mut ecs_os_api: ecs_os_api_t;
}
extern "C" {
    pub fn ecs_os_init();
}
extern "C" {
    pub fn ecs_os_fini();
}
extern "C" {
    pub fn ecs_os_set_api(os_api: *mut ecs_os_api_t);
}
extern "C" {
    pub fn ecs_os_get_api() -> ecs_os_api_t;
}
extern "C" {
    pub fn ecs_os_set_api_defaults();
}
extern "C" {
    pub fn ecs_os_dbg(
        file: *const ::std::os::raw::c_char,
        line: i32,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_os_trace(
        file: *const ::std::os::raw::c_char,
        line: i32,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_os_warn(
        file: *const ::std::os::raw::c_char,
        line: i32,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_os_err(
        file: *const ::std::os::raw::c_char,
        line: i32,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_os_fatal(
        file: *const ::std::os::raw::c_char,
        line: i32,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_os_strerror(err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_os_strset(
        str_: *mut *mut ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_sleepf(t: f64);
}
extern "C" {
    pub fn ecs_time_measure(start: *mut ecs_time_t) -> f64;
}
extern "C" {
    pub fn ecs_time_sub(t1: ecs_time_t, t2: ecs_time_t) -> ecs_time_t;
}
extern "C" {
    pub fn ecs_time_to_double(t: ecs_time_t) -> f64;
}
extern "C" {
    pub fn ecs_os_memdup(
        src: *const ::std::os::raw::c_void,
        size: ecs_size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_os_has_heap() -> bool;
}
extern "C" {
    pub fn ecs_os_has_threading() -> bool;
}
extern "C" {
    pub fn ecs_os_has_task_support() -> bool;
}
extern "C" {
    pub fn ecs_os_has_time() -> bool;
}
extern "C" {
    pub fn ecs_os_has_logging() -> bool;
}
extern "C" {
    pub fn ecs_os_has_dl() -> bool;
}
extern "C" {
    pub fn ecs_os_has_modules() -> bool;
}
pub type ecs_id_t = u64;
pub type ecs_entity_t = ecs_id_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_type_t {
    pub array: *mut ecs_id_t,
    pub count: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_world_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_table_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_query_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_rule_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_id_record_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_table_record_t {
    _unused: [u8; 0],
}
pub type ecs_poly_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_mixins_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_header_t {
    pub magic: i32,
    pub type_: i32,
    pub mixins: *mut ecs_mixins_t,
}
pub type ecs_run_action_t = ::std::option::Option<unsafe extern "C" fn(it: *mut ecs_iter_t)>;
pub type ecs_iter_action_t = ::std::option::Option<unsafe extern "C" fn(it: *mut ecs_iter_t)>;
pub type ecs_iter_init_action_t = ::std::option::Option<
    unsafe extern "C" fn(
        world: *const ecs_world_t,
        iterable: *const ecs_poly_t,
        it: *mut ecs_iter_t,
        filter: *mut ecs_term_t,
    ),
>;
pub type ecs_iter_next_action_t =
    ::std::option::Option<unsafe extern "C" fn(it: *mut ecs_iter_t) -> bool>;
pub type ecs_iter_fini_action_t = ::std::option::Option<unsafe extern "C" fn(it: *mut ecs_iter_t)>;
pub type ecs_order_by_action_t = ::std::option::Option<
    unsafe extern "C" fn(
        e1: ecs_entity_t,
        ptr1: *const ::std::os::raw::c_void,
        e2: ecs_entity_t,
        ptr2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type ecs_sort_table_action_t = ::std::option::Option<
    unsafe extern "C" fn(
        world: *mut ecs_world_t,
        table: *mut ecs_table_t,
        entities: *mut ecs_entity_t,
        ptr: *mut ::std::os::raw::c_void,
        size: i32,
        lo: i32,
        hi: i32,
        order_by: ecs_order_by_action_t,
    ),
>;
pub type ecs_group_by_action_t = ::std::option::Option<
    unsafe extern "C" fn(
        world: *mut ecs_world_t,
        table: *mut ecs_table_t,
        group_id: ecs_id_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> u64,
>;
pub type ecs_group_create_action_t = ::std::option::Option<
    unsafe extern "C" fn(
        world: *mut ecs_world_t,
        group_id: u64,
        group_by_ctx: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type ecs_group_delete_action_t = ::std::option::Option<
    unsafe extern "C" fn(
        world: *mut ecs_world_t,
        group_id: u64,
        group_ctx: *mut ::std::os::raw::c_void,
        group_by_ctx: *mut ::std::os::raw::c_void,
    ),
>;
pub type ecs_module_action_t = ::std::option::Option<unsafe extern "C" fn(world: *mut ecs_world_t)>;
pub type ecs_fini_action_t = ::std::option::Option<
    unsafe extern "C" fn(world: *mut ecs_world_t, ctx: *mut ::std::os::raw::c_void),
>;
pub type ecs_ctx_free_t =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void)>;
pub type ecs_compare_action_t = ::std::option::Option<
    unsafe extern "C" fn(
        ptr1: *const ::std::os::raw::c_void,
        ptr2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type ecs_hash_value_action_t =
    ::std::option::Option<unsafe extern "C" fn(ptr: *const ::std::os::raw::c_void) -> u64>;
pub type ecs_xtor_t = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        count: i32,
        type_info: *const ecs_type_info_t,
    ),
>;
pub type ecs_copy_t = ::std::option::Option<
    unsafe extern "C" fn(
        dst_ptr: *mut ::std::os::raw::c_void,
        src_ptr: *const ::std::os::raw::c_void,
        count: i32,
        type_info: *const ecs_type_info_t,
    ),
>;
pub type ecs_move_t = ::std::option::Option<
    unsafe extern "C" fn(
        dst_ptr: *mut ::std::os::raw::c_void,
        src_ptr: *mut ::std::os::raw::c_void,
        count: i32,
        type_info: *const ecs_type_info_t,
    ),
>;
pub type ecs_poly_dtor_t = ::std::option::Option<unsafe extern "C" fn(poly: *mut ecs_poly_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_iterable_t {
    pub init: ecs_iter_init_action_t,
}
pub const ecs_inout_kind_t_EcsInOutDefault: ecs_inout_kind_t = 0;
pub const ecs_inout_kind_t_EcsInOutNone: ecs_inout_kind_t = 1;
pub const ecs_inout_kind_t_EcsInOut: ecs_inout_kind_t = 2;
pub const ecs_inout_kind_t_EcsIn: ecs_inout_kind_t = 3;
pub const ecs_inout_kind_t_EcsOut: ecs_inout_kind_t = 4;
pub type ecs_inout_kind_t = ::std::os::raw::c_uint;
pub const ecs_oper_kind_t_EcsAnd: ecs_oper_kind_t = 0;
pub const ecs_oper_kind_t_EcsOr: ecs_oper_kind_t = 1;
pub const ecs_oper_kind_t_EcsNot: ecs_oper_kind_t = 2;
pub const ecs_oper_kind_t_EcsOptional: ecs_oper_kind_t = 3;
pub const ecs_oper_kind_t_EcsAndFrom: ecs_oper_kind_t = 4;
pub const ecs_oper_kind_t_EcsOrFrom: ecs_oper_kind_t = 5;
pub const ecs_oper_kind_t_EcsNotFrom: ecs_oper_kind_t = 6;
pub type ecs_oper_kind_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_term_id_t {
    pub id: ecs_entity_t,
    pub name: *const ::std::os::raw::c_char,
    pub trav: ecs_entity_t,
    pub flags: ecs_flags32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_term_t {
    pub id: ecs_id_t,
    pub src: ecs_term_id_t,
    pub first: ecs_term_id_t,
    pub second: ecs_term_id_t,
    pub inout: ecs_inout_kind_t,
    pub oper: ecs_oper_kind_t,
    pub id_flags: ecs_id_t,
    pub name: *mut ::std::os::raw::c_char,
    pub field_index: i32,
    pub idr: *mut ecs_id_record_t,
    pub flags: ecs_flags16_t,
    pub move_: bool,
}
extern "C" {
    pub static mut ECS_FILTER_INIT: ecs_filter_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_filter_t {
    pub hdr: ecs_header_t,
    pub terms: *mut ecs_term_t,
    pub term_count: i32,
    pub field_count: i32,
    pub owned: bool,
    pub terms_owned: bool,
    pub flags: ecs_flags32_t,
    pub variable_names: [*mut ::std::os::raw::c_char; 1usize],
    pub sizes: *mut i32,
    pub entity: ecs_entity_t,
    pub iterable: ecs_iterable_t,
    pub dtor: ecs_poly_dtor_t,
    pub world: *mut ecs_world_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_observer_t {
    pub hdr: ecs_header_t,
    pub filter: ecs_filter_t,
    pub events: [ecs_entity_t; 8usize],
    pub event_count: i32,
    pub callback: ecs_iter_action_t,
    pub run: ecs_run_action_t,
    pub ctx: *mut ::std::os::raw::c_void,
    pub binding_ctx: *mut ::std::os::raw::c_void,
    pub ctx_free: ecs_ctx_free_t,
    pub binding_ctx_free: ecs_ctx_free_t,
    pub observable: *mut ecs_observable_t,
    pub last_event_id: *mut i32,
    pub last_event_id_storage: i32,
    pub register_id: ecs_id_t,
    pub term_index: i32,
    pub is_monitor: bool,
    pub is_multi: bool,
    pub dtor: ecs_poly_dtor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_type_hooks_t {
    pub ctor: ecs_xtor_t,
    pub dtor: ecs_xtor_t,
    pub copy: ecs_copy_t,
    pub move_: ecs_move_t,
    pub copy_ctor: ecs_copy_t,
    pub move_ctor: ecs_move_t,
    pub ctor_move_dtor: ecs_move_t,
    pub move_dtor: ecs_move_t,
    pub on_add: ecs_iter_action_t,
    pub on_set: ecs_iter_action_t,
    pub on_remove: ecs_iter_action_t,
    pub ctx: *mut ::std::os::raw::c_void,
    pub binding_ctx: *mut ::std::os::raw::c_void,
    pub ctx_free: ecs_ctx_free_t,
    pub binding_ctx_free: ecs_ctx_free_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_type_info_t {
    pub size: ecs_size_t,
    pub alignment: ecs_size_t,
    pub hooks: ecs_type_hooks_t,
    pub component: ecs_entity_t,
    pub name: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_stage_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_data_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_switch_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_query_table_match_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_event_record_t {
    pub any: *mut ecs_event_id_record_t,
    pub wildcard: *mut ecs_event_id_record_t,
    pub wildcard_pair: *mut ecs_event_id_record_t,
    pub event_ids: ecs_map_t,
    pub event: ecs_entity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_observable_t {
    pub on_add: ecs_event_record_t,
    pub on_remove: ecs_event_record_t,
    pub on_set: ecs_event_record_t,
    pub un_set: ecs_event_record_t,
    pub on_wildcard: ecs_event_record_t,
    pub events: ecs_sparse_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_record_t {
    pub idr: *mut ecs_id_record_t,
    pub table: *mut ecs_table_t,
    pub row: u32,
    pub dense: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_table_range_t {
    pub table: *mut ecs_table_t,
    pub offset: i32,
    pub count: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_var_t {
    pub range: ecs_table_range_t,
    pub entity: ecs_entity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_ref_t {
    pub entity: ecs_entity_t,
    pub id: ecs_entity_t,
    pub tr: *mut ecs_table_record_t,
    pub record: *mut ecs_record_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_stack_page_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_stack_cursor_t {
    pub prev: *mut ecs_stack_cursor_t,
    pub page: *mut ecs_stack_page_t,
    pub sp: i16,
    pub is_free: bool,
    pub owner: *mut ecs_stack_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_page_iter_t {
    pub offset: i32,
    pub limit: i32,
    pub remaining: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_worker_iter_t {
    pub index: i32,
    pub count: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_table_cache_iter_t {
    pub cur: *mut ecs_table_cache_hdr_t,
    pub next: *mut ecs_table_cache_hdr_t,
    pub next_list: *mut ecs_table_cache_hdr_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_term_iter_t {
    pub term: ecs_term_t,
    pub self_index: *mut ecs_id_record_t,
    pub set_index: *mut ecs_id_record_t,
    pub cur: *mut ecs_id_record_t,
    pub it: ecs_table_cache_iter_t,
    pub index: i32,
    pub observed_table_count: i32,
    pub table: *mut ecs_table_t,
    pub cur_match: i32,
    pub match_count: i32,
    pub last_column: i32,
    pub empty_tables: bool,
    pub id: ecs_id_t,
    pub column: i32,
    pub subject: ecs_entity_t,
    pub size: ecs_size_t,
    pub ptr: *mut ::std::os::raw::c_void,
}
pub const ecs_iter_kind_t_EcsIterEvalCondition: ecs_iter_kind_t = 0;
pub const ecs_iter_kind_t_EcsIterEvalTables: ecs_iter_kind_t = 1;
pub const ecs_iter_kind_t_EcsIterEvalChain: ecs_iter_kind_t = 2;
pub const ecs_iter_kind_t_EcsIterEvalNone: ecs_iter_kind_t = 3;
pub type ecs_iter_kind_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_filter_iter_t {
    pub filter: *const ecs_filter_t,
    pub kind: ecs_iter_kind_t,
    pub term_iter: ecs_term_iter_t,
    pub matches_left: i32,
    pub pivot_term: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_query_iter_t {
    pub query: *mut ecs_query_t,
    pub node: *mut ecs_query_table_match_t,
    pub prev: *mut ecs_query_table_match_t,
    pub last: *mut ecs_query_table_match_t,
    pub sparse_smallest: i32,
    pub sparse_first: i32,
    pub bitset_first: i32,
    pub skip_count: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_snapshot_iter_t {
    pub filter: ecs_filter_t,
    pub tables: ecs_vec_t,
    pub index: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_rule_op_profile_t {
    pub count: [i32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_rule_iter_t {
    pub rule: *const ecs_rule_t,
    pub vars: *mut ecs_var_t,
    pub rule_vars: *mut ecs_rule_var_t,
    pub ops: *mut ecs_rule_op_t,
    pub op_ctx: *mut ecs_rule_op_ctx_t,
    pub written: *mut u64,
    pub profile: *mut ecs_rule_op_profile_t,
    pub redo: bool,
    pub op: i16,
    pub sp: i16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_iter_cache_t {
    pub stack_cursor: *mut ecs_stack_cursor_t,
    pub used: ecs_flags8_t,
    pub allocated: ecs_flags8_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_iter_private_t {
    pub iter: ecs_iter_private_t__bindgen_ty_1,
    pub entity_iter: *mut ::std::os::raw::c_void,
    pub cache: ecs_iter_cache_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ecs_iter_private_t__bindgen_ty_1 {
    pub term: ecs_term_iter_t,
    pub filter: ecs_filter_iter_t,
    pub query: ecs_query_iter_t,
    pub rule: ecs_rule_iter_t,
    pub snapshot: ecs_snapshot_iter_t,
    pub page: ecs_page_iter_t,
    pub worker: ecs_worker_iter_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_iter_t {
    pub world: *mut ecs_world_t,
    pub real_world: *mut ecs_world_t,
    pub entities: *mut ecs_entity_t,
    pub ptrs: *mut *mut ::std::os::raw::c_void,
    pub sizes: *mut ecs_size_t,
    pub table: *mut ecs_table_t,
    pub other_table: *mut ecs_table_t,
    pub ids: *mut ecs_id_t,
    pub variables: *mut ecs_var_t,
    pub columns: *mut i32,
    pub sources: *mut ecs_entity_t,
    pub match_indices: *mut i32,
    pub references: *mut ecs_ref_t,
    pub constrained_vars: ecs_flags64_t,
    pub group_id: u64,
    pub field_count: i32,
    pub system: ecs_entity_t,
    pub event: ecs_entity_t,
    pub event_id: ecs_id_t,
    pub terms: *mut ecs_term_t,
    pub table_count: i32,
    pub term_index: i32,
    pub variable_count: i32,
    pub variable_names: *mut *mut ::std::os::raw::c_char,
    pub param: *mut ::std::os::raw::c_void,
    pub ctx: *mut ::std::os::raw::c_void,
    pub binding_ctx: *mut ::std::os::raw::c_void,
    pub delta_time: f32,
    pub delta_system_time: f32,
    pub frame_offset: i32,
    pub offset: i32,
    pub count: i32,
    pub instance_count: i32,
    pub flags: ecs_flags32_t,
    pub interrupted_by: ecs_entity_t,
    pub priv_: ecs_iter_private_t,
    pub next: ecs_iter_next_action_t,
    pub callback: ecs_iter_action_t,
    pub fini: ecs_iter_fini_action_t,
    pub chain_it: *mut ecs_iter_t,
}
extern "C" {
    pub fn ecs_module_path_from_c(
        c_name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_identifier_is_0(id: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ecs_default_ctor(
        ptr: *mut ::std::os::raw::c_void,
        count: i32,
        ctx: *const ecs_type_info_t,
    );
}
extern "C" {
    pub fn ecs_vasprintf(
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_asprintf(fmt: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flecs_to_snake_case(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flecs_table_observed_count(table: *const ecs_table_t) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_hm_bucket_t {
    pub keys: ecs_vec_t,
    pub values: ecs_vec_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_hashmap_t {
    pub hash: ecs_hash_value_action_t,
    pub compare: ecs_compare_action_t,
    pub key_size: ecs_size_t,
    pub value_size: ecs_size_t,
    pub hashmap_allocator: *mut ecs_block_allocator_t,
    pub bucket_allocator: ecs_block_allocator_t,
    pub impl_: ecs_map_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flecs_hashmap_iter_t {
    pub it: ecs_map_iter_t,
    pub bucket: *mut ecs_hm_bucket_t,
    pub index: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flecs_hashmap_result_t {
    pub key: *mut ::std::os::raw::c_void,
    pub value: *mut ::std::os::raw::c_void,
    pub hash: u64,
}
extern "C" {
    pub fn flecs_hashmap_init_(
        hm: *mut ecs_hashmap_t,
        key_size: ecs_size_t,
        value_size: ecs_size_t,
        hash: ecs_hash_value_action_t,
        compare: ecs_compare_action_t,
        allocator: *mut ecs_allocator_t,
    );
}
extern "C" {
    pub fn flecs_hashmap_fini(map: *mut ecs_hashmap_t);
}
extern "C" {
    pub fn flecs_hashmap_get_(
        map: *const ecs_hashmap_t,
        key_size: ecs_size_t,
        key: *const ::std::os::raw::c_void,
        value_size: ecs_size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn flecs_hashmap_ensure_(
        map: *mut ecs_hashmap_t,
        key_size: ecs_size_t,
        key: *const ::std::os::raw::c_void,
        value_size: ecs_size_t,
    ) -> flecs_hashmap_result_t;
}
extern "C" {
    pub fn flecs_hashmap_set_(
        map: *mut ecs_hashmap_t,
        key_size: ecs_size_t,
        key: *mut ::std::os::raw::c_void,
        value_size: ecs_size_t,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn flecs_hashmap_remove_(
        map: *mut ecs_hashmap_t,
        key_size: ecs_size_t,
        key: *const ::std::os::raw::c_void,
        value_size: ecs_size_t,
    );
}
extern "C" {
    pub fn flecs_hashmap_remove_w_hash_(
        map: *mut ecs_hashmap_t,
        key_size: ecs_size_t,
        key: *const ::std::os::raw::c_void,
        value_size: ecs_size_t,
        hash: u64,
    );
}
extern "C" {
    pub fn flecs_hashmap_get_bucket(map: *const ecs_hashmap_t, hash: u64) -> *mut ecs_hm_bucket_t;
}
extern "C" {
    pub fn flecs_hm_bucket_remove(
        map: *mut ecs_hashmap_t,
        bucket: *mut ecs_hm_bucket_t,
        hash: u64,
        index: i32,
    );
}
extern "C" {
    pub fn flecs_hashmap_copy(dst: *mut ecs_hashmap_t, src: *const ecs_hashmap_t);
}
extern "C" {
    pub fn flecs_hashmap_iter(map: *mut ecs_hashmap_t) -> flecs_hashmap_iter_t;
}
extern "C" {
    pub fn flecs_hashmap_next_(
        it: *mut flecs_hashmap_iter_t,
        key_size: ecs_size_t,
        key_out: *mut ::std::os::raw::c_void,
        value_size: ecs_size_t,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_entity_desc_t {
    pub _canary: i32,
    pub id: ecs_entity_t,
    pub name: *const ::std::os::raw::c_char,
    pub sep: *const ::std::os::raw::c_char,
    pub root_sep: *const ::std::os::raw::c_char,
    pub symbol: *const ::std::os::raw::c_char,
    pub use_low_id: bool,
    pub add: [ecs_id_t; 32usize],
    pub add_expr: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_bulk_desc_t {
    pub _canary: i32,
    pub entities: *mut ecs_entity_t,
    pub count: i32,
    pub ids: [ecs_id_t; 32usize],
    pub data: *mut *mut ::std::os::raw::c_void,
    pub table: *mut ecs_table_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_component_desc_t {
    pub _canary: i32,
    pub entity: ecs_entity_t,
    pub type_: ecs_type_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_filter_desc_t {
    pub _canary: i32,
    pub terms: [ecs_term_t; 16usize],
    pub terms_buffer: *mut ecs_term_t,
    pub terms_buffer_count: i32,
    pub storage: *mut ecs_filter_t,
    pub instanced: bool,
    pub flags: ecs_flags32_t,
    pub expr: *const ::std::os::raw::c_char,
    pub entity: ecs_entity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_query_desc_t {
    pub _canary: i32,
    pub filter: ecs_filter_desc_t,
    pub order_by_component: ecs_entity_t,
    pub order_by: ecs_order_by_action_t,
    pub sort_table: ecs_sort_table_action_t,
    pub group_by_id: ecs_id_t,
    pub group_by: ecs_group_by_action_t,
    pub on_group_create: ecs_group_create_action_t,
    pub on_group_delete: ecs_group_delete_action_t,
    pub group_by_ctx: *mut ::std::os::raw::c_void,
    pub group_by_ctx_free: ecs_ctx_free_t,
    pub parent: *mut ecs_query_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_observer_desc_t {
    pub _canary: i32,
    pub entity: ecs_entity_t,
    pub filter: ecs_filter_desc_t,
    pub events: [ecs_entity_t; 8usize],
    pub yield_existing: bool,
    pub callback: ecs_iter_action_t,
    pub run: ecs_run_action_t,
    pub ctx: *mut ::std::os::raw::c_void,
    pub binding_ctx: *mut ::std::os::raw::c_void,
    pub ctx_free: ecs_ctx_free_t,
    pub binding_ctx_free: ecs_ctx_free_t,
    pub observable: *mut ecs_poly_t,
    pub last_event_id: *mut i32,
    pub term_index: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_value_t {
    pub type_: ecs_entity_t,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_world_info_t {
    pub last_component_id: ecs_entity_t,
    pub min_id: ecs_entity_t,
    pub max_id: ecs_entity_t,
    pub delta_time_raw: f32,
    pub delta_time: f32,
    pub time_scale: f32,
    pub target_fps: f32,
    pub frame_time_total: f32,
    pub system_time_total: f32,
    pub emit_time_total: f32,
    pub merge_time_total: f32,
    pub world_time_total: f32,
    pub world_time_total_raw: f32,
    pub rematch_time_total: f32,
    pub frame_count_total: i64,
    pub merge_count_total: i64,
    pub rematch_count_total: i64,
    pub id_create_total: i64,
    pub id_delete_total: i64,
    pub table_create_total: i64,
    pub table_delete_total: i64,
    pub pipeline_build_count_total: i64,
    pub systems_ran_frame: i64,
    pub observers_ran_frame: i64,
    pub id_count: i32,
    pub tag_id_count: i32,
    pub component_id_count: i32,
    pub pair_id_count: i32,
    pub wildcard_id_count: i32,
    pub table_count: i32,
    pub tag_table_count: i32,
    pub trivial_table_count: i32,
    pub empty_table_count: i32,
    pub table_record_count: i32,
    pub table_storage_count: i32,
    pub cmd: ecs_world_info_t__bindgen_ty_1,
    pub name_prefix: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_world_info_t__bindgen_ty_1 {
    pub add_count: i64,
    pub remove_count: i64,
    pub delete_count: i64,
    pub clear_count: i64,
    pub set_count: i64,
    pub get_mut_count: i64,
    pub modified_count: i64,
    pub other_count: i64,
    pub discard_count: i64,
    pub batched_entity_count: i64,
    pub batched_command_count: i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_query_group_info_t {
    pub match_count: i32,
    pub table_count: i32,
    pub ctx: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsIdentifier {
    pub value: *mut ::std::os::raw::c_char,
    pub length: ecs_size_t,
    pub hash: u64,
    pub index_hash: u64,
    pub index: *mut ecs_hashmap_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsComponent {
    pub size: ecs_size_t,
    pub alignment: ecs_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsPoly {
    pub poly: *mut ecs_poly_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsTarget {
    pub count: i32,
    pub target: *mut ecs_record_t,
}
pub type EcsIterable = ecs_iterable_t;
extern "C" {
    pub static ECS_PAIR: ecs_id_t;
}
extern "C" {
    pub static ECS_OVERRIDE: ecs_id_t;
}
extern "C" {
    pub static ECS_TOGGLE: ecs_id_t;
}
extern "C" {
    pub static ECS_AND: ecs_id_t;
}
extern "C" {
    pub static FLECS_IDEcsComponentID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsIdentifierID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsIterableID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsPolyID_: ecs_entity_t;
}
extern "C" {
    pub static EcsQuery: ecs_entity_t;
}
extern "C" {
    pub static EcsObserver: ecs_entity_t;
}
extern "C" {
    pub static EcsSystem: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsTickSourceID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsPipelineQueryID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsTimerID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsRateFilterID_: ecs_entity_t;
}
extern "C" {
    pub static EcsFlecs: ecs_entity_t;
}
extern "C" {
    pub static EcsFlecsCore: ecs_entity_t;
}
extern "C" {
    pub static EcsWorld: ecs_entity_t;
}
extern "C" {
    pub static EcsWildcard: ecs_entity_t;
}
extern "C" {
    pub static EcsAny: ecs_entity_t;
}
extern "C" {
    pub static EcsThis: ecs_entity_t;
}
extern "C" {
    pub static EcsVariable: ecs_entity_t;
}
extern "C" {
    pub static EcsTransitive: ecs_entity_t;
}
extern "C" {
    pub static EcsReflexive: ecs_entity_t;
}
extern "C" {
    pub static EcsFinal: ecs_entity_t;
}
extern "C" {
    pub static EcsDontInherit: ecs_entity_t;
}
extern "C" {
    pub static EcsAlwaysOverride: ecs_entity_t;
}
extern "C" {
    pub static EcsSymmetric: ecs_entity_t;
}
extern "C" {
    pub static EcsExclusive: ecs_entity_t;
}
extern "C" {
    pub static EcsAcyclic: ecs_entity_t;
}
extern "C" {
    pub static EcsTraversable: ecs_entity_t;
}
extern "C" {
    pub static EcsWith: ecs_entity_t;
}
extern "C" {
    pub static EcsOneOf: ecs_entity_t;
}
extern "C" {
    pub static EcsTag: ecs_entity_t;
}
extern "C" {
    pub static EcsUnion: ecs_entity_t;
}
extern "C" {
    pub static EcsName: ecs_entity_t;
}
extern "C" {
    pub static EcsSymbol: ecs_entity_t;
}
extern "C" {
    pub static EcsAlias: ecs_entity_t;
}
extern "C" {
    pub static EcsChildOf: ecs_entity_t;
}
extern "C" {
    pub static EcsIsA: ecs_entity_t;
}
extern "C" {
    pub static EcsDependsOn: ecs_entity_t;
}
extern "C" {
    pub static EcsSlotOf: ecs_entity_t;
}
extern "C" {
    pub static EcsModule: ecs_entity_t;
}
extern "C" {
    pub static EcsPrivate: ecs_entity_t;
}
extern "C" {
    pub static EcsPrefab: ecs_entity_t;
}
extern "C" {
    pub static EcsDisabled: ecs_entity_t;
}
extern "C" {
    pub static EcsOnAdd: ecs_entity_t;
}
extern "C" {
    pub static EcsOnRemove: ecs_entity_t;
}
extern "C" {
    pub static EcsOnSet: ecs_entity_t;
}
extern "C" {
    pub static EcsUnSet: ecs_entity_t;
}
extern "C" {
    pub static EcsMonitor: ecs_entity_t;
}
extern "C" {
    pub static EcsOnDelete: ecs_entity_t;
}
extern "C" {
    pub static EcsOnTableCreate: ecs_entity_t;
}
extern "C" {
    pub static EcsOnTableDelete: ecs_entity_t;
}
extern "C" {
    pub static EcsOnTableEmpty: ecs_entity_t;
}
extern "C" {
    pub static EcsOnTableFill: ecs_entity_t;
}
extern "C" {
    pub static EcsOnDeleteTarget: ecs_entity_t;
}
extern "C" {
    pub static EcsRemove: ecs_entity_t;
}
extern "C" {
    pub static EcsDelete: ecs_entity_t;
}
extern "C" {
    pub static EcsPanic: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsTargetID_: ecs_entity_t;
}
extern "C" {
    pub static EcsFlatten: ecs_entity_t;
}
extern "C" {
    pub static EcsDefaultChildComponent: ecs_entity_t;
}
extern "C" {
    pub static EcsPredEq: ecs_entity_t;
}
extern "C" {
    pub static EcsPredMatch: ecs_entity_t;
}
extern "C" {
    pub static EcsPredLookup: ecs_entity_t;
}
extern "C" {
    pub static EcsScopeOpen: ecs_entity_t;
}
extern "C" {
    pub static EcsScopeClose: ecs_entity_t;
}
extern "C" {
    pub static EcsEmpty: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsPipelineID_: ecs_entity_t;
}
extern "C" {
    pub static EcsOnStart: ecs_entity_t;
}
extern "C" {
    pub static EcsPreFrame: ecs_entity_t;
}
extern "C" {
    pub static EcsOnLoad: ecs_entity_t;
}
extern "C" {
    pub static EcsPostLoad: ecs_entity_t;
}
extern "C" {
    pub static EcsPreUpdate: ecs_entity_t;
}
extern "C" {
    pub static EcsOnUpdate: ecs_entity_t;
}
extern "C" {
    pub static EcsOnValidate: ecs_entity_t;
}
extern "C" {
    pub static EcsPostUpdate: ecs_entity_t;
}
extern "C" {
    pub static EcsPreStore: ecs_entity_t;
}
extern "C" {
    pub static EcsOnStore: ecs_entity_t;
}
extern "C" {
    pub static EcsPostFrame: ecs_entity_t;
}
extern "C" {
    pub static EcsPhase: ecs_entity_t;
}
extern "C" {
    pub fn ecs_init() -> *mut ecs_world_t;
}
extern "C" {
    pub fn ecs_mini() -> *mut ecs_world_t;
}
extern "C" {
    pub fn ecs_init_w_args(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ecs_world_t;
}
extern "C" {
    pub fn ecs_fini(world: *mut ecs_world_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_is_fini(world: *const ecs_world_t) -> bool;
}
extern "C" {
    pub fn ecs_atfini(
        world: *mut ecs_world_t,
        action: ecs_fini_action_t,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ecs_frame_begin(world: *mut ecs_world_t, delta_time: f32) -> f32;
}
extern "C" {
    pub fn ecs_frame_end(world: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_run_post_frame(
        world: *mut ecs_world_t,
        action: ecs_fini_action_t,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ecs_quit(world: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_should_quit(world: *const ecs_world_t) -> bool;
}
extern "C" {
    pub fn ecs_measure_frame_time(world: *mut ecs_world_t, enable: bool);
}
extern "C" {
    pub fn ecs_measure_system_time(world: *mut ecs_world_t, enable: bool);
}
extern "C" {
    pub fn ecs_set_target_fps(world: *mut ecs_world_t, fps: f32);
}
extern "C" {
    pub fn ecs_readonly_begin(world: *mut ecs_world_t) -> bool;
}
extern "C" {
    pub fn ecs_readonly_end(world: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_merge(world: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_defer_begin(world: *mut ecs_world_t) -> bool;
}
extern "C" {
    pub fn ecs_is_deferred(world: *const ecs_world_t) -> bool;
}
extern "C" {
    pub fn ecs_defer_end(world: *mut ecs_world_t) -> bool;
}
extern "C" {
    pub fn ecs_defer_suspend(world: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_defer_resume(world: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_set_automerge(world: *mut ecs_world_t, automerge: bool);
}
extern "C" {
    pub fn ecs_set_stage_count(world: *mut ecs_world_t, stages: i32);
}
extern "C" {
    pub fn ecs_get_stage_count(world: *const ecs_world_t) -> i32;
}
extern "C" {
    pub fn ecs_get_stage_id(world: *const ecs_world_t) -> i32;
}
extern "C" {
    pub fn ecs_get_stage(world: *const ecs_world_t, stage_id: i32) -> *mut ecs_world_t;
}
extern "C" {
    pub fn ecs_stage_is_readonly(world: *const ecs_world_t) -> bool;
}
extern "C" {
    pub fn ecs_async_stage_new(world: *mut ecs_world_t) -> *mut ecs_world_t;
}
extern "C" {
    pub fn ecs_async_stage_free(stage: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_stage_is_async(stage: *mut ecs_world_t) -> bool;
}
extern "C" {
    pub fn ecs_set_context(world: *mut ecs_world_t, ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ecs_get_context(world: *const ecs_world_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_get_world_info(world: *const ecs_world_t) -> *const ecs_world_info_t;
}
extern "C" {
    pub fn ecs_dim(world: *mut ecs_world_t, entity_count: i32);
}
extern "C" {
    pub fn ecs_set_entity_range(
        world: *mut ecs_world_t,
        id_start: ecs_entity_t,
        id_end: ecs_entity_t,
    );
}
extern "C" {
    pub fn ecs_enable_range_check(world: *mut ecs_world_t, enable: bool) -> bool;
}
extern "C" {
    pub fn ecs_get_max_id(world: *const ecs_world_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_run_aperiodic(world: *mut ecs_world_t, flags: ecs_flags32_t);
}
extern "C" {
    pub fn ecs_delete_empty_tables(
        world: *mut ecs_world_t,
        id: ecs_id_t,
        clear_generation: u16,
        delete_generation: u16,
        min_id_count: i32,
        time_budget_seconds: f64,
    ) -> i32;
}
extern "C" {
    pub fn ecs_get_world(poly: *const ecs_poly_t) -> *const ecs_world_t;
}
extern "C" {
    pub fn ecs_get_entity(poly: *const ecs_poly_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_poly_is_(object: *const ecs_poly_t, type_: i32) -> bool;
}
extern "C" {
    pub fn ecs_make_pair(first: ecs_entity_t, second: ecs_entity_t) -> ecs_id_t;
}
extern "C" {
    pub fn ecs_new_id(world: *mut ecs_world_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_new_low_id(world: *mut ecs_world_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_new_w_id(world: *mut ecs_world_t, id: ecs_id_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_new_w_table(world: *mut ecs_world_t, table: *mut ecs_table_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_entity_init(world: *mut ecs_world_t, desc: *const ecs_entity_desc_t)
        -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_bulk_init(
        world: *mut ecs_world_t,
        desc: *const ecs_bulk_desc_t,
    ) -> *const ecs_entity_t;
}
extern "C" {
    pub fn ecs_bulk_new_w_id(
        world: *mut ecs_world_t,
        id: ecs_id_t,
        count: i32,
    ) -> *const ecs_entity_t;
}
extern "C" {
    pub fn ecs_clone(
        world: *mut ecs_world_t,
        dst: ecs_entity_t,
        src: ecs_entity_t,
        copy_value: bool,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_delete(world: *mut ecs_world_t, entity: ecs_entity_t);
}
extern "C" {
    pub fn ecs_delete_with(world: *mut ecs_world_t, id: ecs_id_t);
}
extern "C" {
    pub fn ecs_add_id(world: *mut ecs_world_t, entity: ecs_entity_t, id: ecs_id_t);
}
extern "C" {
    pub fn ecs_remove_id(world: *mut ecs_world_t, entity: ecs_entity_t, id: ecs_id_t);
}
extern "C" {
    pub fn ecs_override_id(world: *mut ecs_world_t, entity: ecs_entity_t, id: ecs_id_t);
}
extern "C" {
    pub fn ecs_clear(world: *mut ecs_world_t, entity: ecs_entity_t);
}
extern "C" {
    pub fn ecs_remove_all(world: *mut ecs_world_t, id: ecs_id_t);
}
extern "C" {
    pub fn ecs_set_with(world: *mut ecs_world_t, id: ecs_id_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_get_with(world: *const ecs_world_t) -> ecs_id_t;
}
extern "C" {
    pub fn ecs_enable(world: *mut ecs_world_t, entity: ecs_entity_t, enabled: bool);
}
extern "C" {
    pub fn ecs_enable_id(world: *mut ecs_world_t, entity: ecs_entity_t, id: ecs_id_t, enable: bool);
}
extern "C" {
    pub fn ecs_is_enabled_id(world: *const ecs_world_t, entity: ecs_entity_t, id: ecs_id_t)
        -> bool;
}
extern "C" {
    pub fn ecs_get_id(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
        id: ecs_id_t,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_ref_init_id(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
        id: ecs_id_t,
    ) -> ecs_ref_t;
}
extern "C" {
    pub fn ecs_ref_get_id(
        world: *const ecs_world_t,
        ref_: *mut ecs_ref_t,
        id: ecs_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_ref_update(world: *const ecs_world_t, ref_: *mut ecs_ref_t);
}
extern "C" {
    pub fn ecs_get_mut_id(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        id: ecs_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_write_begin(world: *mut ecs_world_t, entity: ecs_entity_t) -> *mut ecs_record_t;
}
extern "C" {
    pub fn ecs_write_end(record: *mut ecs_record_t);
}
extern "C" {
    pub fn ecs_read_begin(world: *mut ecs_world_t, entity: ecs_entity_t) -> *const ecs_record_t;
}
extern "C" {
    pub fn ecs_read_end(record: *const ecs_record_t);
}
extern "C" {
    pub fn ecs_record_get_entity(record: *const ecs_record_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_record_get_id(
        world: *mut ecs_world_t,
        record: *const ecs_record_t,
        id: ecs_id_t,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_record_get_mut_id(
        world: *mut ecs_world_t,
        record: *mut ecs_record_t,
        id: ecs_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_record_has_id(
        world: *mut ecs_world_t,
        record: *const ecs_record_t,
        id: ecs_id_t,
    ) -> bool;
}
extern "C" {
    pub fn ecs_emplace_id(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        id: ecs_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_modified_id(world: *mut ecs_world_t, entity: ecs_entity_t, id: ecs_id_t);
}
extern "C" {
    pub fn ecs_set_id(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        id: ecs_id_t,
        size: usize,
        ptr: *const ::std::os::raw::c_void,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_is_valid(world: *const ecs_world_t, e: ecs_entity_t) -> bool;
}
extern "C" {
    pub fn ecs_is_alive(world: *const ecs_world_t, e: ecs_entity_t) -> bool;
}
extern "C" {
    pub fn ecs_strip_generation(e: ecs_entity_t) -> ecs_id_t;
}
extern "C" {
    pub fn ecs_set_entity_generation(world: *mut ecs_world_t, entity: ecs_entity_t);
}
extern "C" {
    pub fn ecs_get_alive(world: *const ecs_world_t, e: ecs_entity_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_ensure(world: *mut ecs_world_t, entity: ecs_entity_t);
}
extern "C" {
    pub fn ecs_ensure_id(world: *mut ecs_world_t, id: ecs_id_t);
}
extern "C" {
    pub fn ecs_exists(world: *const ecs_world_t, entity: ecs_entity_t) -> bool;
}
extern "C" {
    pub fn ecs_get_type(world: *const ecs_world_t, entity: ecs_entity_t) -> *const ecs_type_t;
}
extern "C" {
    pub fn ecs_get_table(world: *const ecs_world_t, entity: ecs_entity_t) -> *mut ecs_table_t;
}
extern "C" {
    pub fn ecs_type_str(
        world: *const ecs_world_t,
        type_: *const ecs_type_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_table_str(
        world: *const ecs_world_t,
        table: *const ecs_table_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_entity_str(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_has_id(world: *const ecs_world_t, entity: ecs_entity_t, id: ecs_id_t) -> bool;
}
extern "C" {
    pub fn ecs_owns_id(world: *const ecs_world_t, entity: ecs_entity_t, id: ecs_id_t) -> bool;
}
extern "C" {
    pub fn ecs_get_target(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
        rel: ecs_entity_t,
        index: i32,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_get_parent(world: *const ecs_world_t, entity: ecs_entity_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_get_target_for_id(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
        rel: ecs_entity_t,
        id: ecs_id_t,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_get_depth(world: *const ecs_world_t, entity: ecs_entity_t, rel: ecs_entity_t)
        -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_flatten_desc_t {
    pub keep_names: bool,
    pub lose_depth: bool,
}
extern "C" {
    pub fn ecs_flatten(world: *mut ecs_world_t, pair: ecs_id_t, desc: *const ecs_flatten_desc_t);
}
extern "C" {
    pub fn ecs_count_id(world: *const ecs_world_t, entity: ecs_id_t) -> i32;
}
extern "C" {
    pub fn ecs_get_name(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_get_symbol(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_set_name(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        name: *const ::std::os::raw::c_char,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_set_symbol(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        symbol: *const ::std::os::raw::c_char,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_set_alias(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        alias: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_lookup(
        world: *const ecs_world_t,
        name: *const ::std::os::raw::c_char,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_lookup_child(
        world: *const ecs_world_t,
        parent: ecs_entity_t,
        name: *const ::std::os::raw::c_char,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_lookup_path_w_sep(
        world: *const ecs_world_t,
        parent: ecs_entity_t,
        path: *const ::std::os::raw::c_char,
        sep: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
        recursive: bool,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_lookup_symbol(
        world: *const ecs_world_t,
        symbol: *const ::std::os::raw::c_char,
        lookup_as_path: bool,
        recursive: bool,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_get_path_w_sep(
        world: *const ecs_world_t,
        parent: ecs_entity_t,
        child: ecs_entity_t,
        sep: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_get_path_w_sep_buf(
        world: *const ecs_world_t,
        parent: ecs_entity_t,
        child: ecs_entity_t,
        sep: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
        buf: *mut ecs_strbuf_t,
    );
}
extern "C" {
    pub fn ecs_new_from_path_w_sep(
        world: *mut ecs_world_t,
        parent: ecs_entity_t,
        path: *const ::std::os::raw::c_char,
        sep: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_add_path_w_sep(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        parent: ecs_entity_t,
        path: *const ::std::os::raw::c_char,
        sep: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_set_scope(world: *mut ecs_world_t, scope: ecs_entity_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_get_scope(world: *const ecs_world_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_set_name_prefix(
        world: *mut ecs_world_t,
        prefix: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_set_lookup_path(
        world: *mut ecs_world_t,
        lookup_path: *const ecs_entity_t,
    ) -> *mut ecs_entity_t;
}
extern "C" {
    pub fn ecs_get_lookup_path(world: *const ecs_world_t) -> *mut ecs_entity_t;
}
extern "C" {
    pub fn ecs_component_init(
        world: *mut ecs_world_t,
        desc: *const ecs_component_desc_t,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_set_hooks_id(
        world: *mut ecs_world_t,
        id: ecs_entity_t,
        hooks: *const ecs_type_hooks_t,
    );
}
extern "C" {
    pub fn ecs_get_hooks_id(world: *mut ecs_world_t, id: ecs_entity_t) -> *const ecs_type_hooks_t;
}
extern "C" {
    pub fn ecs_id_is_tag(world: *const ecs_world_t, id: ecs_id_t) -> bool;
}
extern "C" {
    pub fn ecs_id_is_union(world: *const ecs_world_t, id: ecs_id_t) -> bool;
}
extern "C" {
    pub fn ecs_id_in_use(world: *const ecs_world_t, id: ecs_id_t) -> bool;
}
extern "C" {
    pub fn ecs_get_type_info(world: *const ecs_world_t, id: ecs_id_t) -> *const ecs_type_info_t;
}
extern "C" {
    pub fn ecs_get_typeid(world: *const ecs_world_t, id: ecs_id_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_id_match(id: ecs_id_t, pattern: ecs_id_t) -> bool;
}
extern "C" {
    pub fn ecs_id_is_pair(id: ecs_id_t) -> bool;
}
extern "C" {
    pub fn ecs_id_is_wildcard(id: ecs_id_t) -> bool;
}
extern "C" {
    pub fn ecs_id_is_valid(world: *const ecs_world_t, id: ecs_id_t) -> bool;
}
extern "C" {
    pub fn ecs_id_get_flags(world: *const ecs_world_t, id: ecs_id_t) -> ecs_flags32_t;
}
extern "C" {
    pub fn ecs_id_flag_str(id_flags: ecs_id_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_id_str(world: *const ecs_world_t, id: ecs_id_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_id_str_buf(world: *const ecs_world_t, id: ecs_id_t, buf: *mut ecs_strbuf_t);
}
extern "C" {
    pub fn ecs_term_iter(world: *const ecs_world_t, term: *mut ecs_term_t) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_term_chain_iter(it: *const ecs_iter_t, term: *mut ecs_term_t) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_term_next(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_children(world: *const ecs_world_t, parent: ecs_entity_t) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_children_next(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_term_id_is_set(id: *const ecs_term_id_t) -> bool;
}
extern "C" {
    pub fn ecs_term_is_initialized(term: *const ecs_term_t) -> bool;
}
extern "C" {
    pub fn ecs_term_match_this(term: *const ecs_term_t) -> bool;
}
extern "C" {
    pub fn ecs_term_match_0(term: *const ecs_term_t) -> bool;
}
extern "C" {
    pub fn ecs_term_finalize(
        world: *const ecs_world_t,
        term: *mut ecs_term_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_term_copy(src: *const ecs_term_t) -> ecs_term_t;
}
extern "C" {
    pub fn ecs_term_move(src: *mut ecs_term_t) -> ecs_term_t;
}
extern "C" {
    pub fn ecs_term_fini(term: *mut ecs_term_t);
}
extern "C" {
    pub fn ecs_filter_init(
        world: *mut ecs_world_t,
        desc: *const ecs_filter_desc_t,
    ) -> *mut ecs_filter_t;
}
extern "C" {
    pub fn ecs_filter_fini(filter: *mut ecs_filter_t);
}
extern "C" {
    pub fn ecs_filter_finalize(
        world: *const ecs_world_t,
        filter: *mut ecs_filter_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_filter_find_this_var(filter: *const ecs_filter_t) -> i32;
}
extern "C" {
    pub fn ecs_term_str(
        world: *const ecs_world_t,
        term: *const ecs_term_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_filter_str(
        world: *const ecs_world_t,
        filter: *const ecs_filter_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_filter_iter(world: *const ecs_world_t, filter: *const ecs_filter_t) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_filter_chain_iter(it: *const ecs_iter_t, filter: *const ecs_filter_t) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_filter_pivot_term(world: *const ecs_world_t, filter: *const ecs_filter_t) -> i32;
}
extern "C" {
    pub fn ecs_filter_next(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_filter_next_instanced(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_filter_move(dst: *mut ecs_filter_t, src: *mut ecs_filter_t);
}
extern "C" {
    pub fn ecs_filter_copy(dst: *mut ecs_filter_t, src: *const ecs_filter_t);
}
extern "C" {
    pub fn ecs_query_init(
        world: *mut ecs_world_t,
        desc: *const ecs_query_desc_t,
    ) -> *mut ecs_query_t;
}
extern "C" {
    pub fn ecs_query_fini(query: *mut ecs_query_t);
}
extern "C" {
    pub fn ecs_query_get_filter(query: *const ecs_query_t) -> *const ecs_filter_t;
}
extern "C" {
    pub fn ecs_query_iter(world: *const ecs_world_t, query: *mut ecs_query_t) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_query_next(iter: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_query_next_instanced(iter: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_query_next_table(iter: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_query_populate(iter: *mut ecs_iter_t, when_changed: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_query_changed(query: *mut ecs_query_t, it: *const ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_query_skip(it: *mut ecs_iter_t);
}
extern "C" {
    pub fn ecs_query_set_group(it: *mut ecs_iter_t, group_id: u64);
}
extern "C" {
    pub fn ecs_query_get_group_ctx(
        query: *const ecs_query_t,
        group_id: u64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_query_get_group_info(
        query: *const ecs_query_t,
        group_id: u64,
    ) -> *const ecs_query_group_info_t;
}
extern "C" {
    pub fn ecs_query_orphaned(query: *const ecs_query_t) -> bool;
}
extern "C" {
    pub fn ecs_query_str(query: *const ecs_query_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_query_table_count(query: *const ecs_query_t) -> i32;
}
extern "C" {
    pub fn ecs_query_empty_table_count(query: *const ecs_query_t) -> i32;
}
extern "C" {
    pub fn ecs_query_entity_count(query: *const ecs_query_t) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_event_desc_t {
    pub event: ecs_entity_t,
    pub ids: *const ecs_type_t,
    pub table: *mut ecs_table_t,
    pub other_table: *mut ecs_table_t,
    pub offset: i32,
    pub count: i32,
    pub entity: ecs_entity_t,
    pub param: *const ::std::os::raw::c_void,
    pub observable: *mut ecs_poly_t,
    pub flags: ecs_flags32_t,
}
extern "C" {
    pub fn ecs_emit(world: *mut ecs_world_t, desc: *mut ecs_event_desc_t);
}
extern "C" {
    pub fn ecs_observer_init(
        world: *mut ecs_world_t,
        desc: *const ecs_observer_desc_t,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_observer_default_run_action(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_get_observer_ctx(
        world: *const ecs_world_t,
        observer: ecs_entity_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_get_observer_binding_ctx(
        world: *const ecs_world_t,
        observer: ecs_entity_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_iter_poly(
        world: *const ecs_world_t,
        poly: *const ecs_poly_t,
        iter: *mut ecs_iter_t,
        filter: *mut ecs_term_t,
    );
}
extern "C" {
    pub fn ecs_iter_next(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_iter_fini(it: *mut ecs_iter_t);
}
extern "C" {
    pub fn ecs_iter_count(it: *mut ecs_iter_t) -> i32;
}
extern "C" {
    pub fn ecs_iter_is_true(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_iter_first(it: *mut ecs_iter_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_iter_set_var(it: *mut ecs_iter_t, var_id: i32, entity: ecs_entity_t);
}
extern "C" {
    pub fn ecs_iter_set_var_as_table(it: *mut ecs_iter_t, var_id: i32, table: *const ecs_table_t);
}
extern "C" {
    pub fn ecs_iter_set_var_as_range(
        it: *mut ecs_iter_t,
        var_id: i32,
        range: *const ecs_table_range_t,
    );
}
extern "C" {
    pub fn ecs_iter_get_var(it: *mut ecs_iter_t, var_id: i32) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_iter_get_var_as_table(it: *mut ecs_iter_t, var_id: i32) -> *mut ecs_table_t;
}
extern "C" {
    pub fn ecs_iter_get_var_as_range(it: *mut ecs_iter_t, var_id: i32) -> ecs_table_range_t;
}
extern "C" {
    pub fn ecs_iter_var_is_constrained(it: *mut ecs_iter_t, var_id: i32) -> bool;
}
extern "C" {
    pub fn ecs_page_iter(it: *const ecs_iter_t, offset: i32, limit: i32) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_page_next(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_worker_iter(it: *const ecs_iter_t, index: i32, count: i32) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_worker_next(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_field_w_size(
        it: *const ecs_iter_t,
        size: usize,
        index: i32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_field_is_readonly(it: *const ecs_iter_t, index: i32) -> bool;
}
extern "C" {
    pub fn ecs_field_is_writeonly(it: *const ecs_iter_t, index: i32) -> bool;
}
extern "C" {
    pub fn ecs_field_is_set(it: *const ecs_iter_t, index: i32) -> bool;
}
extern "C" {
    pub fn ecs_field_id(it: *const ecs_iter_t, index: i32) -> ecs_id_t;
}
extern "C" {
    pub fn ecs_field_column_index(it: *const ecs_iter_t, index: i32) -> i32;
}
extern "C" {
    pub fn ecs_field_src(it: *const ecs_iter_t, index: i32) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_field_size(it: *const ecs_iter_t, index: i32) -> usize;
}
extern "C" {
    pub fn ecs_field_is_self(it: *const ecs_iter_t, index: i32) -> bool;
}
extern "C" {
    pub fn ecs_iter_str(it: *const ecs_iter_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_table_get_type(table: *const ecs_table_t) -> *const ecs_type_t;
}
extern "C" {
    pub fn ecs_table_get_type_index(
        world: *const ecs_world_t,
        table: *const ecs_table_t,
        id: ecs_id_t,
    ) -> i32;
}
extern "C" {
    pub fn ecs_table_get_column_index(
        world: *const ecs_world_t,
        table: *const ecs_table_t,
        id: ecs_id_t,
    ) -> i32;
}
extern "C" {
    pub fn ecs_table_column_count(table: *const ecs_table_t) -> i32;
}
extern "C" {
    pub fn ecs_table_type_to_column_index(table: *const ecs_table_t, index: i32) -> i32;
}
extern "C" {
    pub fn ecs_table_column_to_type_index(table: *const ecs_table_t, index: i32) -> i32;
}
extern "C" {
    pub fn ecs_table_get_column(
        table: *const ecs_table_t,
        index: i32,
        offset: i32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_table_get_id(
        world: *const ecs_world_t,
        table: *const ecs_table_t,
        id: ecs_id_t,
        offset: i32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_table_get_column_size(table: *const ecs_table_t, index: i32) -> usize;
}
extern "C" {
    pub fn ecs_table_count(table: *const ecs_table_t) -> i32;
}
extern "C" {
    pub fn ecs_table_has_id(
        world: *const ecs_world_t,
        table: *const ecs_table_t,
        id: ecs_id_t,
    ) -> bool;
}
extern "C" {
    pub fn ecs_table_get_depth(
        world: *const ecs_world_t,
        table: *const ecs_table_t,
        rel: ecs_entity_t,
    ) -> i32;
}
extern "C" {
    pub fn ecs_table_add_id(
        world: *mut ecs_world_t,
        table: *mut ecs_table_t,
        id: ecs_id_t,
    ) -> *mut ecs_table_t;
}
extern "C" {
    pub fn ecs_table_find(
        world: *mut ecs_world_t,
        ids: *const ecs_id_t,
        id_count: i32,
    ) -> *mut ecs_table_t;
}
extern "C" {
    pub fn ecs_table_remove_id(
        world: *mut ecs_world_t,
        table: *mut ecs_table_t,
        id: ecs_id_t,
    ) -> *mut ecs_table_t;
}
extern "C" {
    pub fn ecs_table_lock(world: *mut ecs_world_t, table: *mut ecs_table_t);
}
extern "C" {
    pub fn ecs_table_unlock(world: *mut ecs_world_t, table: *mut ecs_table_t);
}
extern "C" {
    pub fn ecs_table_has_flags(table: *mut ecs_table_t, flags: ecs_flags32_t) -> bool;
}
extern "C" {
    pub fn ecs_table_swap_rows(
        world: *mut ecs_world_t,
        table: *mut ecs_table_t,
        row_1: i32,
        row_2: i32,
    );
}
extern "C" {
    pub fn ecs_commit(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        record: *mut ecs_record_t,
        table: *mut ecs_table_t,
        added: *const ecs_type_t,
        removed: *const ecs_type_t,
    ) -> bool;
}
extern "C" {
    pub fn ecs_record_find(world: *const ecs_world_t, entity: ecs_entity_t) -> *mut ecs_record_t;
}
extern "C" {
    pub fn ecs_record_get_column(
        r: *const ecs_record_t,
        column: i32,
        c_size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_search(
        world: *const ecs_world_t,
        table: *const ecs_table_t,
        id: ecs_id_t,
        id_out: *mut ecs_id_t,
    ) -> i32;
}
extern "C" {
    pub fn ecs_search_offset(
        world: *const ecs_world_t,
        table: *const ecs_table_t,
        offset: i32,
        id: ecs_id_t,
        id_out: *mut ecs_id_t,
    ) -> i32;
}
extern "C" {
    pub fn ecs_search_relation(
        world: *const ecs_world_t,
        table: *const ecs_table_t,
        offset: i32,
        id: ecs_id_t,
        rel: ecs_entity_t,
        flags: ecs_flags32_t,
        subject_out: *mut ecs_entity_t,
        id_out: *mut ecs_id_t,
        tr_out: *mut *mut ecs_table_record_t,
    ) -> i32;
}
extern "C" {
    pub fn ecs_value_init(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        ptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_value_init_w_type_info(
        world: *const ecs_world_t,
        ti: *const ecs_type_info_t,
        ptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_value_new(
        world: *mut ecs_world_t,
        type_: ecs_entity_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_value_new_w_type_info(
        world: *mut ecs_world_t,
        ti: *const ecs_type_info_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_value_fini_w_type_info(
        world: *const ecs_world_t,
        ti: *const ecs_type_info_t,
        ptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_value_fini(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        ptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_value_free(
        world: *mut ecs_world_t,
        type_: ecs_entity_t,
        ptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_value_copy_w_type_info(
        world: *const ecs_world_t,
        ti: *const ecs_type_info_t,
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_value_copy(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_value_move_w_type_info(
        world: *const ecs_world_t,
        ti: *const ecs_type_info_t,
        dst: *mut ::std::os::raw::c_void,
        src: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_value_move(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        dst: *mut ::std::os::raw::c_void,
        src: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_value_move_ctor_w_type_info(
        world: *const ecs_world_t,
        ti: *const ecs_type_info_t,
        dst: *mut ::std::os::raw::c_void,
        src: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_value_move_ctor(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        dst: *mut ::std::os::raw::c_void,
        src: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_deprecated_(
        file: *const ::std::os::raw::c_char,
        line: i32,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_log_push_(level: i32);
}
extern "C" {
    pub fn ecs_log_pop_(level: i32);
}
extern "C" {
    pub fn ecs_should_log(level: i32) -> bool;
}
extern "C" {
    pub fn ecs_strerror(error_code: i32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_print_(
        level: i32,
        file: *const ::std::os::raw::c_char,
        line: i32,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn ecs_printv_(
        level: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: i32,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
extern "C" {
    pub fn ecs_log_(
        level: i32,
        file: *const ::std::os::raw::c_char,
        line: i32,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn ecs_logv_(
        level: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: i32,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
extern "C" {
    pub fn ecs_abort_(
        error_code: i32,
        file: *const ::std::os::raw::c_char,
        line: i32,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn ecs_assert_(
        condition: bool,
        error_code: i32,
        condition_str: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: i32,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn ecs_parser_error_(
        name: *const ::std::os::raw::c_char,
        expr: *const ::std::os::raw::c_char,
        column: i64,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn ecs_parser_errorv_(
        name: *const ::std::os::raw::c_char,
        expr: *const ::std::os::raw::c_char,
        column: i64,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
extern "C" {
    pub fn ecs_log_set_level(level: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_log_get_level() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_log_enable_colors(enabled: bool) -> bool;
}
extern "C" {
    pub fn ecs_log_enable_timestamp(enabled: bool) -> bool;
}
extern "C" {
    pub fn ecs_log_enable_timedelta(enabled: bool) -> bool;
}
extern "C" {
    pub fn ecs_log_last_error() -> ::std::os::raw::c_int;
}
pub type ecs_app_init_action_t =
    ::std::option::Option<unsafe extern "C" fn(world: *mut ecs_world_t) -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_app_desc_t {
    pub target_fps: f32,
    pub delta_time: f32,
    pub threads: i32,
    pub frames: i32,
    pub enable_rest: bool,
    pub enable_monitor: bool,
    pub port: u16,
    pub init: ecs_app_init_action_t,
    pub ctx: *mut ::std::os::raw::c_void,
}
pub type ecs_app_run_action_t = ::std::option::Option<
    unsafe extern "C" fn(
        world: *mut ecs_world_t,
        desc: *mut ecs_app_desc_t,
    ) -> ::std::os::raw::c_int,
>;
pub type ecs_app_frame_action_t = ::std::option::Option<
    unsafe extern "C" fn(
        world: *mut ecs_world_t,
        desc: *const ecs_app_desc_t,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn ecs_app_run(world: *mut ecs_world_t, desc: *mut ecs_app_desc_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_app_run_frame(
        world: *mut ecs_world_t,
        desc: *const ecs_app_desc_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_app_set_run_action(callback: ecs_app_run_action_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_app_set_frame_action(callback: ecs_app_frame_action_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_http_server_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_http_connection_t {
    pub id: u64,
    pub server: *mut ecs_http_server_t,
    pub host: [::std::os::raw::c_char; 128usize],
    pub port: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_http_key_value_t {
    pub key: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
pub const ecs_http_method_t_EcsHttpGet: ecs_http_method_t = 0;
pub const ecs_http_method_t_EcsHttpPost: ecs_http_method_t = 1;
pub const ecs_http_method_t_EcsHttpPut: ecs_http_method_t = 2;
pub const ecs_http_method_t_EcsHttpDelete: ecs_http_method_t = 3;
pub const ecs_http_method_t_EcsHttpOptions: ecs_http_method_t = 4;
pub const ecs_http_method_t_EcsHttpMethodUnsupported: ecs_http_method_t = 5;
pub type ecs_http_method_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_http_request_t {
    pub id: u64,
    pub method: ecs_http_method_t,
    pub path: *mut ::std::os::raw::c_char,
    pub body: *mut ::std::os::raw::c_char,
    pub headers: [ecs_http_key_value_t; 32usize],
    pub params: [ecs_http_key_value_t; 32usize],
    pub header_count: i32,
    pub param_count: i32,
    pub conn: *mut ecs_http_connection_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_http_reply_t {
    pub code: ::std::os::raw::c_int,
    pub body: ecs_strbuf_t,
    pub status: *const ::std::os::raw::c_char,
    pub content_type: *const ::std::os::raw::c_char,
    pub headers: ecs_strbuf_t,
}
extern "C" {
    pub static mut ecs_http_request_received_count: i64;
}
extern "C" {
    pub static mut ecs_http_request_invalid_count: i64;
}
extern "C" {
    pub static mut ecs_http_request_handled_ok_count: i64;
}
extern "C" {
    pub static mut ecs_http_request_handled_error_count: i64;
}
extern "C" {
    pub static mut ecs_http_request_not_handled_count: i64;
}
extern "C" {
    pub static mut ecs_http_request_preflight_count: i64;
}
extern "C" {
    pub static mut ecs_http_send_ok_count: i64;
}
extern "C" {
    pub static mut ecs_http_send_error_count: i64;
}
extern "C" {
    pub static mut ecs_http_busy_count: i64;
}
pub type ecs_http_reply_action_t = ::std::option::Option<
    unsafe extern "C" fn(
        request: *const ecs_http_request_t,
        reply: *mut ecs_http_reply_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_http_server_desc_t {
    pub callback: ecs_http_reply_action_t,
    pub ctx: *mut ::std::os::raw::c_void,
    pub port: u16,
    pub ipaddr: *const ::std::os::raw::c_char,
    pub send_queue_wait_ms: i32,
}
extern "C" {
    pub fn ecs_http_server_init(desc: *const ecs_http_server_desc_t) -> *mut ecs_http_server_t;
}
extern "C" {
    pub fn ecs_http_server_fini(server: *mut ecs_http_server_t);
}
extern "C" {
    pub fn ecs_http_server_start(server: *mut ecs_http_server_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_http_server_dequeue(server: *mut ecs_http_server_t, delta_time: f32);
}
extern "C" {
    pub fn ecs_http_server_stop(server: *mut ecs_http_server_t);
}
extern "C" {
    pub fn ecs_http_server_http_request(
        srv: *mut ecs_http_server_t,
        req: *const ::std::os::raw::c_char,
        len: ecs_size_t,
        reply_out: *mut ecs_http_reply_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_http_server_request(
        srv: *mut ecs_http_server_t,
        method: *const ::std::os::raw::c_char,
        req: *const ::std::os::raw::c_char,
        reply_out: *mut ecs_http_reply_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_http_server_ctx(srv: *mut ecs_http_server_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_http_get_header(
        req: *const ecs_http_request_t,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_http_get_param(
        req: *const ecs_http_request_t,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub static FLECS_IDEcsRestID_: ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsRest {
    pub port: u16,
    pub ipaddr: *mut ::std::os::raw::c_char,
    pub impl_: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub static mut ecs_rest_request_count: i64;
}
extern "C" {
    pub static mut ecs_rest_entity_count: i64;
}
extern "C" {
    pub static mut ecs_rest_entity_error_count: i64;
}
extern "C" {
    pub static mut ecs_rest_query_count: i64;
}
extern "C" {
    pub static mut ecs_rest_query_error_count: i64;
}
extern "C" {
    pub static mut ecs_rest_query_name_count: i64;
}
extern "C" {
    pub static mut ecs_rest_query_name_error_count: i64;
}
extern "C" {
    pub static mut ecs_rest_query_name_from_cache_count: i64;
}
extern "C" {
    pub static mut ecs_rest_enable_count: i64;
}
extern "C" {
    pub static mut ecs_rest_enable_error_count: i64;
}
extern "C" {
    pub static mut ecs_rest_delete_count: i64;
}
extern "C" {
    pub static mut ecs_rest_delete_error_count: i64;
}
extern "C" {
    pub static mut ecs_rest_world_stats_count: i64;
}
extern "C" {
    pub static mut ecs_rest_pipeline_stats_count: i64;
}
extern "C" {
    pub static mut ecs_rest_stats_error_count: i64;
}
extern "C" {
    pub fn ecs_rest_server_init(
        world: *mut ecs_world_t,
        desc: *const ecs_http_server_desc_t,
    ) -> *mut ecs_http_server_t;
}
extern "C" {
    pub fn ecs_rest_server_fini(srv: *mut ecs_http_server_t);
}
extern "C" {
    pub fn FlecsRestImport(world: *mut ecs_world_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsTimer {
    pub timeout: f32,
    pub time: f32,
    pub overshoot: f32,
    pub fired_count: i32,
    pub active: bool,
    pub single_shot: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsRateFilter {
    pub src: ecs_entity_t,
    pub rate: i32,
    pub tick_count: i32,
    pub time_elapsed: f32,
}
extern "C" {
    pub fn ecs_set_timeout(
        world: *mut ecs_world_t,
        tick_source: ecs_entity_t,
        timeout: f32,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_get_timeout(world: *const ecs_world_t, tick_source: ecs_entity_t) -> f32;
}
extern "C" {
    pub fn ecs_set_interval(
        world: *mut ecs_world_t,
        tick_source: ecs_entity_t,
        interval: f32,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_get_interval(world: *const ecs_world_t, tick_source: ecs_entity_t) -> f32;
}
extern "C" {
    pub fn ecs_start_timer(world: *mut ecs_world_t, tick_source: ecs_entity_t);
}
extern "C" {
    pub fn ecs_stop_timer(world: *mut ecs_world_t, tick_source: ecs_entity_t);
}
extern "C" {
    pub fn ecs_set_rate(
        world: *mut ecs_world_t,
        tick_source: ecs_entity_t,
        rate: i32,
        source: ecs_entity_t,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_set_tick_source(
        world: *mut ecs_world_t,
        system: ecs_entity_t,
        tick_source: ecs_entity_t,
    );
}
extern "C" {
    pub fn FlecsTimerImport(world: *mut ecs_world_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_pipeline_desc_t {
    pub entity: ecs_entity_t,
    pub query: ecs_query_desc_t,
}
extern "C" {
    pub fn ecs_pipeline_init(
        world: *mut ecs_world_t,
        desc: *const ecs_pipeline_desc_t,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_set_pipeline(world: *mut ecs_world_t, pipeline: ecs_entity_t);
}
extern "C" {
    pub fn ecs_get_pipeline(world: *const ecs_world_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_progress(world: *mut ecs_world_t, delta_time: f32) -> bool;
}
extern "C" {
    pub fn ecs_set_time_scale(world: *mut ecs_world_t, scale: f32);
}
extern "C" {
    pub fn ecs_reset_clock(world: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_run_pipeline(world: *mut ecs_world_t, pipeline: ecs_entity_t, delta_time: f32);
}
extern "C" {
    pub fn ecs_set_threads(world: *mut ecs_world_t, threads: i32);
}
extern "C" {
    pub fn ecs_set_task_threads(world: *mut ecs_world_t, task_threads: i32);
}
extern "C" {
    pub fn ecs_using_task_threads(world: *mut ecs_world_t) -> bool;
}
extern "C" {
    pub fn FlecsPipelineImport(world: *mut ecs_world_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsTickSource {
    pub tick: bool,
    pub time_elapsed: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_system_desc_t {
    pub _canary: i32,
    pub entity: ecs_entity_t,
    pub query: ecs_query_desc_t,
    pub run: ecs_run_action_t,
    pub callback: ecs_iter_action_t,
    pub ctx: *mut ::std::os::raw::c_void,
    pub binding_ctx: *mut ::std::os::raw::c_void,
    pub ctx_free: ecs_ctx_free_t,
    pub binding_ctx_free: ecs_ctx_free_t,
    pub interval: f32,
    pub rate: i32,
    pub tick_source: ecs_entity_t,
    pub multi_threaded: bool,
    pub no_readonly: bool,
}
extern "C" {
    pub fn ecs_system_init(world: *mut ecs_world_t, desc: *const ecs_system_desc_t)
        -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_run(
        world: *mut ecs_world_t,
        system: ecs_entity_t,
        delta_time: f32,
        param: *mut ::std::os::raw::c_void,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_run_worker(
        world: *mut ecs_world_t,
        system: ecs_entity_t,
        stage_current: i32,
        stage_count: i32,
        delta_time: f32,
        param: *mut ::std::os::raw::c_void,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_run_w_filter(
        world: *mut ecs_world_t,
        system: ecs_entity_t,
        delta_time: f32,
        offset: i32,
        limit: i32,
        param: *mut ::std::os::raw::c_void,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_system_get_query(
        world: *const ecs_world_t,
        system: ecs_entity_t,
    ) -> *mut ecs_query_t;
}
extern "C" {
    pub fn ecs_get_system_ctx(
        world: *const ecs_world_t,
        system: ecs_entity_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_get_system_binding_ctx(
        world: *const ecs_world_t,
        system: ecs_entity_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn FlecsSystemImport(world: *mut ecs_world_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_gauge_t {
    pub avg: [f32; 60usize],
    pub min: [f32; 60usize],
    pub max: [f32; 60usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_counter_t {
    pub rate: ecs_gauge_t,
    pub value: [f64; 60usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ecs_metric_t {
    pub gauge: ecs_gauge_t,
    pub counter: ecs_counter_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_world_stats_t {
    pub first_: i64,
    pub entities: ecs_world_stats_t__bindgen_ty_1,
    pub ids: ecs_world_stats_t__bindgen_ty_2,
    pub tables: ecs_world_stats_t__bindgen_ty_3,
    pub queries: ecs_world_stats_t__bindgen_ty_4,
    pub commands: ecs_world_stats_t__bindgen_ty_5,
    pub frame: ecs_world_stats_t__bindgen_ty_6,
    pub performance: ecs_world_stats_t__bindgen_ty_7,
    pub memory: ecs_world_stats_t__bindgen_ty_8,
    pub rest: ecs_world_stats_t__bindgen_ty_9,
    pub http: ecs_world_stats_t__bindgen_ty_10,
    pub last_: i64,
    pub t: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_world_stats_t__bindgen_ty_1 {
    pub count: ecs_metric_t,
    pub not_alive_count: ecs_metric_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_world_stats_t__bindgen_ty_2 {
    pub count: ecs_metric_t,
    pub tag_count: ecs_metric_t,
    pub component_count: ecs_metric_t,
    pub pair_count: ecs_metric_t,
    pub wildcard_count: ecs_metric_t,
    pub type_count: ecs_metric_t,
    pub create_count: ecs_metric_t,
    pub delete_count: ecs_metric_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_world_stats_t__bindgen_ty_3 {
    pub count: ecs_metric_t,
    pub empty_count: ecs_metric_t,
    pub tag_only_count: ecs_metric_t,
    pub trivial_only_count: ecs_metric_t,
    pub record_count: ecs_metric_t,
    pub storage_count: ecs_metric_t,
    pub create_count: ecs_metric_t,
    pub delete_count: ecs_metric_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_world_stats_t__bindgen_ty_4 {
    pub query_count: ecs_metric_t,
    pub observer_count: ecs_metric_t,
    pub system_count: ecs_metric_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_world_stats_t__bindgen_ty_5 {
    pub add_count: ecs_metric_t,
    pub remove_count: ecs_metric_t,
    pub delete_count: ecs_metric_t,
    pub clear_count: ecs_metric_t,
    pub set_count: ecs_metric_t,
    pub get_mut_count: ecs_metric_t,
    pub modified_count: ecs_metric_t,
    pub other_count: ecs_metric_t,
    pub discard_count: ecs_metric_t,
    pub batched_entity_count: ecs_metric_t,
    pub batched_count: ecs_metric_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_world_stats_t__bindgen_ty_6 {
    pub frame_count: ecs_metric_t,
    pub merge_count: ecs_metric_t,
    pub rematch_count: ecs_metric_t,
    pub pipeline_build_count: ecs_metric_t,
    pub systems_ran: ecs_metric_t,
    pub observers_ran: ecs_metric_t,
    pub event_emit_count: ecs_metric_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_world_stats_t__bindgen_ty_7 {
    pub world_time_raw: ecs_metric_t,
    pub world_time: ecs_metric_t,
    pub frame_time: ecs_metric_t,
    pub system_time: ecs_metric_t,
    pub emit_time: ecs_metric_t,
    pub merge_time: ecs_metric_t,
    pub rematch_time: ecs_metric_t,
    pub fps: ecs_metric_t,
    pub delta_time: ecs_metric_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_world_stats_t__bindgen_ty_8 {
    pub alloc_count: ecs_metric_t,
    pub realloc_count: ecs_metric_t,
    pub free_count: ecs_metric_t,
    pub outstanding_alloc_count: ecs_metric_t,
    pub block_alloc_count: ecs_metric_t,
    pub block_free_count: ecs_metric_t,
    pub block_outstanding_alloc_count: ecs_metric_t,
    pub stack_alloc_count: ecs_metric_t,
    pub stack_free_count: ecs_metric_t,
    pub stack_outstanding_alloc_count: ecs_metric_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_world_stats_t__bindgen_ty_9 {
    pub request_count: ecs_metric_t,
    pub entity_count: ecs_metric_t,
    pub entity_error_count: ecs_metric_t,
    pub query_count: ecs_metric_t,
    pub query_error_count: ecs_metric_t,
    pub query_name_count: ecs_metric_t,
    pub query_name_error_count: ecs_metric_t,
    pub query_name_from_cache_count: ecs_metric_t,
    pub enable_count: ecs_metric_t,
    pub enable_error_count: ecs_metric_t,
    pub world_stats_count: ecs_metric_t,
    pub pipeline_stats_count: ecs_metric_t,
    pub stats_error_count: ecs_metric_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_world_stats_t__bindgen_ty_10 {
    pub request_received_count: ecs_metric_t,
    pub request_invalid_count: ecs_metric_t,
    pub request_handled_ok_count: ecs_metric_t,
    pub request_handled_error_count: ecs_metric_t,
    pub request_not_handled_count: ecs_metric_t,
    pub request_preflight_count: ecs_metric_t,
    pub send_ok_count: ecs_metric_t,
    pub send_error_count: ecs_metric_t,
    pub busy_count: ecs_metric_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_query_stats_t {
    pub first_: i64,
    pub matched_table_count: ecs_metric_t,
    pub matched_empty_table_count: ecs_metric_t,
    pub matched_entity_count: ecs_metric_t,
    pub last_: i64,
    pub t: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ecs_system_stats_t {
    pub first_: i64,
    pub time_spent: ecs_metric_t,
    pub invoke_count: ecs_metric_t,
    pub active: ecs_metric_t,
    pub enabled: ecs_metric_t,
    pub last_: i64,
    pub task: bool,
    pub query: ecs_query_stats_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_pipeline_stats_t {
    pub canary_: i8,
    pub systems: ecs_vec_t,
    pub system_stats: ecs_map_t,
    pub t: i32,
    pub system_count: i32,
    pub active_system_count: i32,
    pub rebuild_count: i32,
}
extern "C" {
    pub fn ecs_world_stats_get(world: *const ecs_world_t, stats: *mut ecs_world_stats_t);
}
extern "C" {
    pub fn ecs_world_stats_reduce(dst: *mut ecs_world_stats_t, src: *const ecs_world_stats_t);
}
extern "C" {
    pub fn ecs_world_stats_reduce_last(
        stats: *mut ecs_world_stats_t,
        old: *const ecs_world_stats_t,
        count: i32,
    );
}
extern "C" {
    pub fn ecs_world_stats_repeat_last(stats: *mut ecs_world_stats_t);
}
extern "C" {
    pub fn ecs_world_stats_copy_last(dst: *mut ecs_world_stats_t, src: *const ecs_world_stats_t);
}
extern "C" {
    pub fn ecs_world_stats_log(world: *const ecs_world_t, stats: *const ecs_world_stats_t);
}
extern "C" {
    pub fn ecs_query_stats_get(
        world: *const ecs_world_t,
        query: *const ecs_query_t,
        stats: *mut ecs_query_stats_t,
    );
}
extern "C" {
    pub fn ecs_query_stats_reduce(dst: *mut ecs_query_stats_t, src: *const ecs_query_stats_t);
}
extern "C" {
    pub fn ecs_query_stats_reduce_last(
        stats: *mut ecs_query_stats_t,
        old: *const ecs_query_stats_t,
        count: i32,
    );
}
extern "C" {
    pub fn ecs_query_stats_repeat_last(stats: *mut ecs_query_stats_t);
}
extern "C" {
    pub fn ecs_query_stats_copy_last(dst: *mut ecs_query_stats_t, src: *const ecs_query_stats_t);
}
extern "C" {
    pub fn ecs_system_stats_get(
        world: *const ecs_world_t,
        system: ecs_entity_t,
        stats: *mut ecs_system_stats_t,
    ) -> bool;
}
extern "C" {
    pub fn ecs_system_stats_reduce(dst: *mut ecs_system_stats_t, src: *const ecs_system_stats_t);
}
extern "C" {
    pub fn ecs_system_stats_reduce_last(
        stats: *mut ecs_system_stats_t,
        old: *const ecs_system_stats_t,
        count: i32,
    );
}
extern "C" {
    pub fn ecs_system_stats_repeat_last(stats: *mut ecs_system_stats_t);
}
extern "C" {
    pub fn ecs_system_stats_copy_last(dst: *mut ecs_system_stats_t, src: *const ecs_system_stats_t);
}
extern "C" {
    pub fn ecs_pipeline_stats_get(
        world: *mut ecs_world_t,
        pipeline: ecs_entity_t,
        stats: *mut ecs_pipeline_stats_t,
    ) -> bool;
}
extern "C" {
    pub fn ecs_pipeline_stats_fini(stats: *mut ecs_pipeline_stats_t);
}
extern "C" {
    pub fn ecs_pipeline_stats_reduce(
        dst: *mut ecs_pipeline_stats_t,
        src: *const ecs_pipeline_stats_t,
    );
}
extern "C" {
    pub fn ecs_pipeline_stats_reduce_last(
        stats: *mut ecs_pipeline_stats_t,
        old: *const ecs_pipeline_stats_t,
        count: i32,
    );
}
extern "C" {
    pub fn ecs_pipeline_stats_repeat_last(stats: *mut ecs_pipeline_stats_t);
}
extern "C" {
    pub fn ecs_pipeline_stats_copy_last(
        dst: *mut ecs_pipeline_stats_t,
        src: *const ecs_pipeline_stats_t,
    );
}
extern "C" {
    pub fn ecs_metric_reduce(
        dst: *mut ecs_metric_t,
        src: *const ecs_metric_t,
        t_dst: i32,
        t_src: i32,
    );
}
extern "C" {
    pub fn ecs_metric_reduce_last(m: *mut ecs_metric_t, t: i32, count: i32);
}
extern "C" {
    pub fn ecs_metric_copy(m: *mut ecs_metric_t, dst: i32, src: i32);
}
extern "C" {
    pub static mut FLECS_IDFlecsMetricsID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMetric: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMetricID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsCounter: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsCounterID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsCounterIncrement: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsCounterIncrementID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsCounterId: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsCounterIdID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsGauge: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsGaugeID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMetricInstance: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMetricInstanceID_: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMetricValueID_: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMetricSourceID_: ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsMetricValue {
    pub value: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsMetricSource {
    pub entity: ecs_entity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_metric_desc_t {
    pub _canary: i32,
    pub entity: ecs_entity_t,
    pub member: ecs_entity_t,
    pub id: ecs_id_t,
    pub targets: bool,
    pub kind: ecs_entity_t,
    pub brief: *const ::std::os::raw::c_char,
}
extern "C" {
    pub fn ecs_metric_init(world: *mut ecs_world_t, desc: *const ecs_metric_desc_t)
        -> ecs_entity_t;
}
extern "C" {
    pub fn FlecsMetricsImport(world: *mut ecs_world_t);
}
extern "C" {
    pub static mut FLECS_IDFlecsAlertsID_: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsAlertID_: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsAlertInstanceID_: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsAlertsActiveID_: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsAlertTimeoutID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsAlertInfo: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsAlertInfoID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsAlertWarning: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsAlertWarningID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsAlertError: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsAlertErrorID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsAlertCritical: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsAlertCriticalID_: ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsAlertInstance {
    pub message: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsAlertsActive {
    pub alerts: ecs_map_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_alert_severity_filter_t {
    pub severity: ecs_entity_t,
    pub with: ecs_id_t,
    pub var: *const ::std::os::raw::c_char,
    pub _var_index: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_alert_desc_t {
    pub _canary: i32,
    pub entity: ecs_entity_t,
    pub filter: ecs_filter_desc_t,
    pub message: *const ::std::os::raw::c_char,
    pub doc_name: *const ::std::os::raw::c_char,
    pub brief: *const ::std::os::raw::c_char,
    pub severity: ecs_entity_t,
    pub severity_filters: [ecs_alert_severity_filter_t; 4usize],
    pub retain_period: f32,
    pub member: ecs_entity_t,
    pub id: ecs_id_t,
    pub var: *const ::std::os::raw::c_char,
}
extern "C" {
    pub fn ecs_alert_init(world: *mut ecs_world_t, desc: *const ecs_alert_desc_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_get_alert_count(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
        alert: ecs_entity_t,
    ) -> i32;
}
extern "C" {
    pub fn ecs_get_alert(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
        alert: ecs_entity_t,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn FlecsAlertsImport(world: *mut ecs_world_t);
}
extern "C" {
    pub static mut FLECS_IDFlecsMonitorID_: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsWorldStatsID_: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsWorldSummaryID_: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsPipelineStatsID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPeriod1s: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPeriod1m: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPeriod1h: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPeriod1d: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPeriod1w: ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsStatsHeader {
    pub elapsed: f32,
    pub reduce_count: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct EcsWorldStats {
    pub hdr: EcsStatsHeader,
    pub stats: ecs_world_stats_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsPipelineStats {
    pub hdr: EcsStatsHeader,
    pub stats: ecs_pipeline_stats_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsWorldSummary {
    pub target_fps: f64,
    pub frame_time_total: f64,
    pub system_time_total: f64,
    pub merge_time_total: f64,
    pub frame_time_last: f64,
    pub system_time_last: f64,
    pub merge_time_last: f64,
}
extern "C" {
    pub fn FlecsMonitorImport(world: *mut ecs_world_t);
}
extern "C" {
    pub fn FlecsCoreDocImport(world: *mut ecs_world_t);
}
extern "C" {
    pub static FLECS_IDEcsDocDescriptionID_: ecs_entity_t;
}
extern "C" {
    pub static EcsDocBrief: ecs_entity_t;
}
extern "C" {
    pub static EcsDocDetail: ecs_entity_t;
}
extern "C" {
    pub static EcsDocLink: ecs_entity_t;
}
extern "C" {
    pub static EcsDocColor: ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsDocDescription {
    pub value: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn ecs_doc_set_name(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_doc_set_brief(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        description: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_doc_set_detail(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        description: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_doc_set_link(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        link: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_doc_set_color(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        color: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ecs_doc_get_name(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_doc_get_brief(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_doc_get_detail(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_doc_get_link(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_doc_get_color(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn FlecsDocImport(world: *mut ecs_world_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_from_json_desc_t {
    pub name: *const ::std::os::raw::c_char,
    pub expr: *const ::std::os::raw::c_char,
    pub lookup_action: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ecs_world_t,
            value: *const ::std::os::raw::c_char,
            ctx: *mut ::std::os::raw::c_void,
        ) -> ecs_entity_t,
    >,
    pub lookup_ctx: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn ecs_ptr_from_json(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        ptr: *mut ::std::os::raw::c_void,
        json: *const ::std::os::raw::c_char,
        desc: *const ecs_from_json_desc_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_entity_from_json(
        world: *mut ecs_world_t,
        entity: ecs_entity_t,
        json: *const ::std::os::raw::c_char,
        desc: *const ecs_from_json_desc_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_world_from_json(
        world: *mut ecs_world_t,
        json: *const ::std::os::raw::c_char,
        desc: *const ecs_from_json_desc_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_array_to_json(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        data: *const ::std::os::raw::c_void,
        count: i32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_array_to_json_buf(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        data: *const ::std::os::raw::c_void,
        count: i32,
        buf_out: *mut ecs_strbuf_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_ptr_to_json(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        data: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_ptr_to_json_buf(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        data: *const ::std::os::raw::c_void,
        buf_out: *mut ecs_strbuf_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_type_info_to_json(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_type_info_to_json_buf(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        buf_out: *mut ecs_strbuf_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_entity_to_json_desc_t {
    pub serialize_path: bool,
    pub serialize_meta_ids: bool,
    pub serialize_label: bool,
    pub serialize_brief: bool,
    pub serialize_link: bool,
    pub serialize_color: bool,
    pub serialize_id_labels: bool,
    pub serialize_base: bool,
    pub serialize_private: bool,
    pub serialize_hidden: bool,
    pub serialize_values: bool,
    pub serialize_type_info: bool,
    pub serialize_alerts: bool,
    pub serialize_refs: ecs_entity_t,
}
extern "C" {
    pub fn ecs_entity_to_json(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
        desc: *const ecs_entity_to_json_desc_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_entity_to_json_buf(
        world: *const ecs_world_t,
        entity: ecs_entity_t,
        buf_out: *mut ecs_strbuf_t,
        desc: *const ecs_entity_to_json_desc_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_iter_to_json_desc_t {
    pub serialize_term_ids: bool,
    pub serialize_ids: bool,
    pub serialize_sources: bool,
    pub serialize_variables: bool,
    pub serialize_is_set: bool,
    pub serialize_values: bool,
    pub serialize_entities: bool,
    pub serialize_entity_labels: bool,
    pub serialize_entity_ids: bool,
    pub serialize_entity_names: bool,
    pub serialize_variable_labels: bool,
    pub serialize_variable_ids: bool,
    pub serialize_colors: bool,
    pub measure_eval_duration: bool,
    pub serialize_type_info: bool,
    pub serialize_table: bool,
}
extern "C" {
    pub fn ecs_iter_to_json(
        world: *const ecs_world_t,
        iter: *mut ecs_iter_t,
        desc: *const ecs_iter_to_json_desc_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_iter_to_json_buf(
        world: *const ecs_world_t,
        iter: *mut ecs_iter_t,
        buf_out: *mut ecs_strbuf_t,
        desc: *const ecs_iter_to_json_desc_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_world_to_json_desc_t {
    pub serialize_builtin: bool,
    pub serialize_modules: bool,
}
extern "C" {
    pub fn ecs_world_to_json(
        world: *mut ecs_world_t,
        desc: *const ecs_world_to_json_desc_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_world_to_json_buf(
        world: *mut ecs_world_t,
        buf_out: *mut ecs_strbuf_t,
        desc: *const ecs_world_to_json_desc_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut EcsUnitPrefixes: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsUnitPrefixesID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsYocto: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsYoctoID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsZepto: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsZeptoID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsAtto: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsAttoID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsFemto: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsFemtoID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPico: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsPicoID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsNano: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsNanoID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMicro: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMicroID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMilli: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMilliID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsCenti: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsCentiID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsDeci: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsDeciID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsDeca: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsDecaID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsHecto: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsHectoID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKilo: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsKiloID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMega: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMegaID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsGiga: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsGigaID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsTera: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsTeraID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPeta: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsPetaID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsExa: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsExaID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsZetta: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsZettaID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsYotta: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsYottaID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKibi: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsKibiID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMebi: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMebiID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsGibi: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsGibiID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsTebi: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsTebiID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPebi: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsPebiID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsExbi: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsExbiID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsZebi: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsZebiID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsYobi: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsYobiID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsDuration: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsDurationID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPicoSeconds: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsPicoSecondsID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsNanoSeconds: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsNanoSecondsID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMicroSeconds: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMicroSecondsID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMilliSeconds: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMilliSecondsID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsSeconds: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsSecondsID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMinutes: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMinutesID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsHours: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsHoursID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsDays: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsDaysID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsTime: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsTimeID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsDate: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsDateID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMass: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMassID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsGrams: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsGramsID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKiloGrams: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsKiloGramsID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsElectricCurrent: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsElectricCurrentID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsAmpere: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsAmpereID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsAmount: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsAmountID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMole: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMoleID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsLuminousIntensity: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsLuminousIntensityID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsCandela: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsCandelaID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsForce: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsForceID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsNewton: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsNewtonID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsLength: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsLengthID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMeters: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMetersID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPicoMeters: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsPicoMetersID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsNanoMeters: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsNanoMetersID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMicroMeters: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMicroMetersID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMilliMeters: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMilliMetersID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsCentiMeters: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsCentiMetersID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKiloMeters: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsKiloMetersID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMiles: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMilesID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPixels: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsPixelsID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPressure: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsPressureID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPascal: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsPascalID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsBar: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsBarID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsSpeed: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsSpeedID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMetersPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMetersPerSecondID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKiloMetersPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsKiloMetersPerSecondID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKiloMetersPerHour: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsKiloMetersPerHourID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMilesPerHour: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMilesPerHourID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsTemperature: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsTemperatureID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKelvin: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsKelvinID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsCelsius: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsCelsiusID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsFahrenheit: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsFahrenheitID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsData: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsDataID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsBits: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsBitsID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKiloBits: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsKiloBitsID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMegaBits: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMegaBitsID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsGigaBits: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsGigaBitsID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsBytes: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsBytesID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKiloBytes: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsKiloBytesID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMegaBytes: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMegaBytesID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsGigaBytes: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsGigaBytesID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKibiBytes: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsKibiBytesID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMebiBytes: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMebiBytesID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsGibiBytes: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsGibiBytesID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsDataRate: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsDataRateID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsBitsPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsBitsPerSecondID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKiloBitsPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsKiloBitsPerSecondID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMegaBitsPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMegaBitsPerSecondID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsGigaBitsPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsGigaBitsPerSecondID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsBytesPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsBytesPerSecondID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKiloBytesPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsKiloBytesPerSecondID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMegaBytesPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMegaBytesPerSecondID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsGigaBytesPerSecond: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsGigaBytesPerSecondID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsAngle: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsAngleID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsRadians: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsRadiansID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsDegrees: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsDegreesID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsFrequency: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsFrequencyID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsHertz: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsHertzID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsKiloHertz: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsKiloHertzID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsMegaHertz: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsMegaHertzID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsGigaHertz: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsGigaHertzID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsUri: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsUriID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsUriHyperlink: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsUriHyperlinkID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsUriImage: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsUriImageID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsUriFile: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsUriFileID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsAcceleration: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsAccelerationID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsPercentage: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsPercentageID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsBel: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsBelID_: ecs_entity_t;
}
extern "C" {
    pub static mut EcsDeciBel: ecs_entity_t;
}
extern "C" {
    pub static mut FLECS_IDEcsDeciBelID_: ecs_entity_t;
}
extern "C" {
    pub fn FlecsUnitsImport(world: *mut ecs_world_t);
}
pub type ecs_bool_t = bool;
pub type ecs_char_t = ::std::os::raw::c_char;
pub type ecs_byte_t = ::std::os::raw::c_uchar;
pub type ecs_u8_t = u8;
pub type ecs_u16_t = u16;
pub type ecs_u32_t = u32;
pub type ecs_u64_t = u64;
pub type ecs_uptr_t = usize;
pub type ecs_i8_t = i8;
pub type ecs_i16_t = i16;
pub type ecs_i32_t = i32;
pub type ecs_i64_t = i64;
pub type ecs_iptr_t = isize;
pub type ecs_f32_t = f32;
pub type ecs_f64_t = f64;
pub type ecs_string_t = *mut ::std::os::raw::c_char;
extern "C" {
    pub static FLECS_IDEcsMetaTypeID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsMetaTypeSerializedID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsPrimitiveID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsEnumID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsBitmaskID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsMemberID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsMemberRangesID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsStructID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsArrayID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsVectorID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsOpaqueID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsUnitID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDEcsUnitPrefixID_: ecs_entity_t;
}
extern "C" {
    pub static EcsConstant: ecs_entity_t;
}
extern "C" {
    pub static EcsQuantity: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDecs_bool_tID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDecs_char_tID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDecs_byte_tID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDecs_u8_tID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDecs_u16_tID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDecs_u32_tID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDecs_u64_tID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDecs_uptr_tID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDecs_i8_tID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDecs_i16_tID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDecs_i32_tID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDecs_i64_tID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDecs_iptr_tID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDecs_f32_tID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDecs_f64_tID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDecs_string_tID_: ecs_entity_t;
}
extern "C" {
    pub static FLECS_IDecs_entity_tID_: ecs_entity_t;
}
pub const ecs_type_kind_t_EcsPrimitiveType: ecs_type_kind_t = 0;
pub const ecs_type_kind_t_EcsBitmaskType: ecs_type_kind_t = 1;
pub const ecs_type_kind_t_EcsEnumType: ecs_type_kind_t = 2;
pub const ecs_type_kind_t_EcsStructType: ecs_type_kind_t = 3;
pub const ecs_type_kind_t_EcsArrayType: ecs_type_kind_t = 4;
pub const ecs_type_kind_t_EcsVectorType: ecs_type_kind_t = 5;
pub const ecs_type_kind_t_EcsOpaqueType: ecs_type_kind_t = 6;
pub const ecs_type_kind_t_EcsTypeKindLast: ecs_type_kind_t = 6;
pub type ecs_type_kind_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsMetaType {
    pub kind: ecs_type_kind_t,
    pub existing: bool,
    pub partial: bool,
}
pub const ecs_primitive_kind_t_EcsBool: ecs_primitive_kind_t = 1;
pub const ecs_primitive_kind_t_EcsChar: ecs_primitive_kind_t = 2;
pub const ecs_primitive_kind_t_EcsByte: ecs_primitive_kind_t = 3;
pub const ecs_primitive_kind_t_EcsU8: ecs_primitive_kind_t = 4;
pub const ecs_primitive_kind_t_EcsU16: ecs_primitive_kind_t = 5;
pub const ecs_primitive_kind_t_EcsU32: ecs_primitive_kind_t = 6;
pub const ecs_primitive_kind_t_EcsU64: ecs_primitive_kind_t = 7;
pub const ecs_primitive_kind_t_EcsI8: ecs_primitive_kind_t = 8;
pub const ecs_primitive_kind_t_EcsI16: ecs_primitive_kind_t = 9;
pub const ecs_primitive_kind_t_EcsI32: ecs_primitive_kind_t = 10;
pub const ecs_primitive_kind_t_EcsI64: ecs_primitive_kind_t = 11;
pub const ecs_primitive_kind_t_EcsF32: ecs_primitive_kind_t = 12;
pub const ecs_primitive_kind_t_EcsF64: ecs_primitive_kind_t = 13;
pub const ecs_primitive_kind_t_EcsUPtr: ecs_primitive_kind_t = 14;
pub const ecs_primitive_kind_t_EcsIPtr: ecs_primitive_kind_t = 15;
pub const ecs_primitive_kind_t_EcsString: ecs_primitive_kind_t = 16;
pub const ecs_primitive_kind_t_EcsEntity: ecs_primitive_kind_t = 17;
pub const ecs_primitive_kind_t_EcsPrimitiveKindLast: ecs_primitive_kind_t = 17;
pub type ecs_primitive_kind_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsPrimitive {
    pub kind: ecs_primitive_kind_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsMember {
    pub type_: ecs_entity_t,
    pub count: i32,
    pub unit: ecs_entity_t,
    pub offset: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_member_value_range_t {
    pub min: f64,
    pub max: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsMemberRanges {
    pub value: ecs_member_value_range_t,
    pub warning: ecs_member_value_range_t,
    pub error: ecs_member_value_range_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_member_t {
    pub name: *const ::std::os::raw::c_char,
    pub type_: ecs_entity_t,
    pub count: i32,
    pub offset: i32,
    pub unit: ecs_entity_t,
    pub range: ecs_member_value_range_t,
    pub error_range: ecs_member_value_range_t,
    pub warning_range: ecs_member_value_range_t,
    pub size: ecs_size_t,
    pub member: ecs_entity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsStruct {
    pub members: ecs_vec_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_enum_constant_t {
    pub name: *const ::std::os::raw::c_char,
    pub value: i32,
    pub constant: ecs_entity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsEnum {
    pub constants: ecs_map_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_bitmask_constant_t {
    pub name: *const ::std::os::raw::c_char,
    pub value: ecs_flags32_t,
    pub constant: ecs_entity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsBitmask {
    pub constants: ecs_map_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsArray {
    pub type_: ecs_entity_t,
    pub count: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsVector {
    pub type_: ecs_entity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_serializer_t {
    pub value: ::std::option::Option<
        unsafe extern "C" fn(
            ser: *const ecs_serializer_t,
            type_: ecs_entity_t,
            value: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub member: ::std::option::Option<
        unsafe extern "C" fn(
            ser: *const ecs_serializer_t,
            member: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub world: *const ecs_world_t,
    pub ctx: *mut ::std::os::raw::c_void,
}
pub type ecs_meta_serialize_t = ::std::option::Option<
    unsafe extern "C" fn(
        ser: *const ecs_serializer_t,
        src: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsOpaque {
    pub as_type: ecs_entity_t,
    pub serialize: ecs_meta_serialize_t,
    pub assign_bool:
        ::std::option::Option<unsafe extern "C" fn(dst: *mut ::std::os::raw::c_void, value: bool)>,
    pub assign_char: ::std::option::Option<
        unsafe extern "C" fn(dst: *mut ::std::os::raw::c_void, value: ::std::os::raw::c_char),
    >,
    pub assign_int:
        ::std::option::Option<unsafe extern "C" fn(dst: *mut ::std::os::raw::c_void, value: i64)>,
    pub assign_uint:
        ::std::option::Option<unsafe extern "C" fn(dst: *mut ::std::os::raw::c_void, value: u64)>,
    pub assign_float:
        ::std::option::Option<unsafe extern "C" fn(dst: *mut ::std::os::raw::c_void, value: f64)>,
    pub assign_string: ::std::option::Option<
        unsafe extern "C" fn(
            dst: *mut ::std::os::raw::c_void,
            value: *const ::std::os::raw::c_char,
        ),
    >,
    pub assign_entity: ::std::option::Option<
        unsafe extern "C" fn(
            dst: *mut ::std::os::raw::c_void,
            world: *mut ecs_world_t,
            entity: ecs_entity_t,
        ),
    >,
    pub assign_null: ::std::option::Option<unsafe extern "C" fn(dst: *mut ::std::os::raw::c_void)>,
    pub clear: ::std::option::Option<unsafe extern "C" fn(dst: *mut ::std::os::raw::c_void)>,
    pub ensure_element: ::std::option::Option<
        unsafe extern "C" fn(
            dst: *mut ::std::os::raw::c_void,
            elem: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub ensure_member: ::std::option::Option<
        unsafe extern "C" fn(
            dst: *mut ::std::os::raw::c_void,
            member: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub count:
        ::std::option::Option<unsafe extern "C" fn(dst: *const ::std::os::raw::c_void) -> usize>,
    pub resize:
        ::std::option::Option<unsafe extern "C" fn(dst: *mut ::std::os::raw::c_void, count: usize)>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_unit_translation_t {
    pub factor: i32,
    pub power: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsUnit {
    pub symbol: *mut ::std::os::raw::c_char,
    pub prefix: ecs_entity_t,
    pub base: ecs_entity_t,
    pub over: ecs_entity_t,
    pub translation: ecs_unit_translation_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsUnitPrefix {
    pub symbol: *mut ::std::os::raw::c_char,
    pub translation: ecs_unit_translation_t,
}
pub const ecs_meta_type_op_kind_t_EcsOpArray: ecs_meta_type_op_kind_t = 0;
pub const ecs_meta_type_op_kind_t_EcsOpVector: ecs_meta_type_op_kind_t = 1;
pub const ecs_meta_type_op_kind_t_EcsOpOpaque: ecs_meta_type_op_kind_t = 2;
pub const ecs_meta_type_op_kind_t_EcsOpPush: ecs_meta_type_op_kind_t = 3;
pub const ecs_meta_type_op_kind_t_EcsOpPop: ecs_meta_type_op_kind_t = 4;
pub const ecs_meta_type_op_kind_t_EcsOpScope: ecs_meta_type_op_kind_t = 5;
pub const ecs_meta_type_op_kind_t_EcsOpEnum: ecs_meta_type_op_kind_t = 6;
pub const ecs_meta_type_op_kind_t_EcsOpBitmask: ecs_meta_type_op_kind_t = 7;
pub const ecs_meta_type_op_kind_t_EcsOpPrimitive: ecs_meta_type_op_kind_t = 8;
pub const ecs_meta_type_op_kind_t_EcsOpBool: ecs_meta_type_op_kind_t = 9;
pub const ecs_meta_type_op_kind_t_EcsOpChar: ecs_meta_type_op_kind_t = 10;
pub const ecs_meta_type_op_kind_t_EcsOpByte: ecs_meta_type_op_kind_t = 11;
pub const ecs_meta_type_op_kind_t_EcsOpU8: ecs_meta_type_op_kind_t = 12;
pub const ecs_meta_type_op_kind_t_EcsOpU16: ecs_meta_type_op_kind_t = 13;
pub const ecs_meta_type_op_kind_t_EcsOpU32: ecs_meta_type_op_kind_t = 14;
pub const ecs_meta_type_op_kind_t_EcsOpU64: ecs_meta_type_op_kind_t = 15;
pub const ecs_meta_type_op_kind_t_EcsOpI8: ecs_meta_type_op_kind_t = 16;
pub const ecs_meta_type_op_kind_t_EcsOpI16: ecs_meta_type_op_kind_t = 17;
pub const ecs_meta_type_op_kind_t_EcsOpI32: ecs_meta_type_op_kind_t = 18;
pub const ecs_meta_type_op_kind_t_EcsOpI64: ecs_meta_type_op_kind_t = 19;
pub const ecs_meta_type_op_kind_t_EcsOpF32: ecs_meta_type_op_kind_t = 20;
pub const ecs_meta_type_op_kind_t_EcsOpF64: ecs_meta_type_op_kind_t = 21;
pub const ecs_meta_type_op_kind_t_EcsOpUPtr: ecs_meta_type_op_kind_t = 22;
pub const ecs_meta_type_op_kind_t_EcsOpIPtr: ecs_meta_type_op_kind_t = 23;
pub const ecs_meta_type_op_kind_t_EcsOpString: ecs_meta_type_op_kind_t = 24;
pub const ecs_meta_type_op_kind_t_EcsOpEntity: ecs_meta_type_op_kind_t = 25;
pub const ecs_meta_type_op_kind_t_EcsMetaTypeOpKindLast: ecs_meta_type_op_kind_t = 25;
pub type ecs_meta_type_op_kind_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_meta_type_op_t {
    pub kind: ecs_meta_type_op_kind_t,
    pub offset: ecs_size_t,
    pub count: i32,
    pub name: *const ::std::os::raw::c_char,
    pub op_count: i32,
    pub size: ecs_size_t,
    pub type_: ecs_entity_t,
    pub member_index: i32,
    pub members: *mut ecs_hashmap_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsMetaTypeSerialized {
    pub ops: ecs_vec_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_meta_scope_t {
    pub type_: ecs_entity_t,
    pub ops: *mut ecs_meta_type_op_t,
    pub op_count: i32,
    pub op_cur: i32,
    pub elem_cur: i32,
    pub prev_depth: i32,
    pub ptr: *mut ::std::os::raw::c_void,
    pub comp: *const EcsComponent,
    pub opaque: *const EcsOpaque,
    pub vector: *mut ecs_vec_t,
    pub members: *mut ecs_hashmap_t,
    pub is_collection: bool,
    pub is_inline_array: bool,
    pub is_empty_scope: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_meta_cursor_t {
    pub world: *const ecs_world_t,
    pub scope: [ecs_meta_scope_t; 32usize],
    pub depth: i32,
    pub valid: bool,
    pub is_primitive_scope: bool,
    pub lookup_action: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ecs_world_t,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ecs_entity_t,
    >,
    pub lookup_ctx: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn ecs_meta_cursor(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        ptr: *mut ::std::os::raw::c_void,
    ) -> ecs_meta_cursor_t;
}
extern "C" {
    pub fn ecs_meta_get_ptr(cursor: *mut ecs_meta_cursor_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ecs_meta_next(cursor: *mut ecs_meta_cursor_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_elem(cursor: *mut ecs_meta_cursor_t, elem: i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_member(
        cursor: *mut ecs_meta_cursor_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_dotmember(
        cursor: *mut ecs_meta_cursor_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_push(cursor: *mut ecs_meta_cursor_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_pop(cursor: *mut ecs_meta_cursor_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_is_collection(cursor: *const ecs_meta_cursor_t) -> bool;
}
extern "C" {
    pub fn ecs_meta_get_type(cursor: *const ecs_meta_cursor_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_meta_get_unit(cursor: *const ecs_meta_cursor_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_meta_get_member(cursor: *const ecs_meta_cursor_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_meta_set_bool(cursor: *mut ecs_meta_cursor_t, value: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_set_char(
        cursor: *mut ecs_meta_cursor_t,
        value: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_set_int(cursor: *mut ecs_meta_cursor_t, value: i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_set_uint(cursor: *mut ecs_meta_cursor_t, value: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_set_float(cursor: *mut ecs_meta_cursor_t, value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_set_string(
        cursor: *mut ecs_meta_cursor_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_set_string_literal(
        cursor: *mut ecs_meta_cursor_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_set_entity(
        cursor: *mut ecs_meta_cursor_t,
        value: ecs_entity_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_set_null(cursor: *mut ecs_meta_cursor_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_set_value(
        cursor: *mut ecs_meta_cursor_t,
        value: *const ecs_value_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_meta_get_bool(cursor: *const ecs_meta_cursor_t) -> bool;
}
extern "C" {
    pub fn ecs_meta_get_char(cursor: *const ecs_meta_cursor_t) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_meta_get_int(cursor: *const ecs_meta_cursor_t) -> i64;
}
extern "C" {
    pub fn ecs_meta_get_uint(cursor: *const ecs_meta_cursor_t) -> u64;
}
extern "C" {
    pub fn ecs_meta_get_float(cursor: *const ecs_meta_cursor_t) -> f64;
}
extern "C" {
    pub fn ecs_meta_get_string(cursor: *const ecs_meta_cursor_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_meta_get_entity(cursor: *const ecs_meta_cursor_t) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_meta_ptr_to_float(
        type_kind: ecs_primitive_kind_t,
        ptr: *const ::std::os::raw::c_void,
    ) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_primitive_desc_t {
    pub entity: ecs_entity_t,
    pub kind: ecs_primitive_kind_t,
}
extern "C" {
    pub fn ecs_primitive_init(
        world: *mut ecs_world_t,
        desc: *const ecs_primitive_desc_t,
    ) -> ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_enum_desc_t {
    pub entity: ecs_entity_t,
    pub constants: [ecs_enum_constant_t; 32usize],
}
extern "C" {
    pub fn ecs_enum_init(world: *mut ecs_world_t, desc: *const ecs_enum_desc_t) -> ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_bitmask_desc_t {
    pub entity: ecs_entity_t,
    pub constants: [ecs_bitmask_constant_t; 32usize],
}
extern "C" {
    pub fn ecs_bitmask_init(
        world: *mut ecs_world_t,
        desc: *const ecs_bitmask_desc_t,
    ) -> ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_array_desc_t {
    pub entity: ecs_entity_t,
    pub type_: ecs_entity_t,
    pub count: i32,
}
extern "C" {
    pub fn ecs_array_init(world: *mut ecs_world_t, desc: *const ecs_array_desc_t) -> ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_vector_desc_t {
    pub entity: ecs_entity_t,
    pub type_: ecs_entity_t,
}
extern "C" {
    pub fn ecs_vector_init(world: *mut ecs_world_t, desc: *const ecs_vector_desc_t)
        -> ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_struct_desc_t {
    pub entity: ecs_entity_t,
    pub members: [ecs_member_t; 32usize],
}
extern "C" {
    pub fn ecs_struct_init(world: *mut ecs_world_t, desc: *const ecs_struct_desc_t)
        -> ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_opaque_desc_t {
    pub entity: ecs_entity_t,
    pub type_: EcsOpaque,
}
extern "C" {
    pub fn ecs_opaque_init(world: *mut ecs_world_t, desc: *const ecs_opaque_desc_t)
        -> ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_unit_desc_t {
    pub entity: ecs_entity_t,
    pub symbol: *const ::std::os::raw::c_char,
    pub quantity: ecs_entity_t,
    pub base: ecs_entity_t,
    pub over: ecs_entity_t,
    pub translation: ecs_unit_translation_t,
    pub prefix: ecs_entity_t,
}
extern "C" {
    pub fn ecs_unit_init(world: *mut ecs_world_t, desc: *const ecs_unit_desc_t) -> ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_unit_prefix_desc_t {
    pub entity: ecs_entity_t,
    pub symbol: *const ::std::os::raw::c_char,
    pub translation: ecs_unit_translation_t,
}
extern "C" {
    pub fn ecs_unit_prefix_init(
        world: *mut ecs_world_t,
        desc: *const ecs_unit_prefix_desc_t,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_quantity_init(
        world: *mut ecs_world_t,
        desc: *const ecs_entity_desc_t,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn FlecsMetaImport(world: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_chresc(
        out: *mut ::std::os::raw::c_char,
        in_: ::std::os::raw::c_char,
        delimiter: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_chrparse(
        in_: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_stresc(
        out: *mut ::std::os::raw::c_char,
        size: ecs_size_t,
        delimiter: ::std::os::raw::c_char,
        in_: *const ::std::os::raw::c_char,
    ) -> ecs_size_t;
}
extern "C" {
    pub fn ecs_astresc(
        delimiter: ::std::os::raw::c_char,
        in_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_expr_var_t {
    pub name: *mut ::std::os::raw::c_char,
    pub value: ecs_value_t,
    pub owned: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_expr_var_scope_t {
    pub var_index: ecs_hashmap_t,
    pub vars: ecs_vec_t,
    pub parent: *mut ecs_expr_var_scope_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_vars_t {
    pub world: *mut ecs_world_t,
    pub root: ecs_expr_var_scope_t,
    pub cur: *mut ecs_expr_var_scope_t,
}
extern "C" {
    pub fn ecs_vars_init(world: *mut ecs_world_t, vars: *mut ecs_vars_t);
}
extern "C" {
    pub fn ecs_vars_fini(vars: *mut ecs_vars_t);
}
extern "C" {
    pub fn ecs_vars_push(vars: *mut ecs_vars_t);
}
extern "C" {
    pub fn ecs_vars_pop(vars: *mut ecs_vars_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_vars_declare(
        vars: *mut ecs_vars_t,
        name: *const ::std::os::raw::c_char,
        type_: ecs_entity_t,
    ) -> *mut ecs_expr_var_t;
}
extern "C" {
    pub fn ecs_vars_declare_w_value(
        vars: *mut ecs_vars_t,
        name: *const ::std::os::raw::c_char,
        value: *mut ecs_value_t,
    ) -> *mut ecs_expr_var_t;
}
extern "C" {
    pub fn ecs_vars_lookup(
        vars: *const ecs_vars_t,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ecs_expr_var_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_parse_expr_desc_t {
    pub name: *const ::std::os::raw::c_char,
    pub expr: *const ::std::os::raw::c_char,
    pub lookup_action: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ecs_world_t,
            value: *const ::std::os::raw::c_char,
            ctx: *mut ::std::os::raw::c_void,
        ) -> ecs_entity_t,
    >,
    pub lookup_ctx: *mut ::std::os::raw::c_void,
    pub vars: *mut ecs_vars_t,
}
extern "C" {
    pub fn ecs_parse_expr(
        world: *mut ecs_world_t,
        ptr: *const ::std::os::raw::c_char,
        value: *mut ecs_value_t,
        desc: *const ecs_parse_expr_desc_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_ptr_to_expr(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        data: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_ptr_to_expr_buf(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        data: *const ::std::os::raw::c_void,
        buf: *mut ecs_strbuf_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_ptr_to_str(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        data: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_ptr_to_str_buf(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
        data: *const ::std::os::raw::c_void,
        buf: *mut ecs_strbuf_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_primitive_to_expr_buf(
        world: *const ecs_world_t,
        kind: ecs_primitive_kind_t,
        data: *const ::std::os::raw::c_void,
        buf: *mut ecs_strbuf_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_parse_expr_token(
        name: *const ::std::os::raw::c_char,
        expr: *const ::std::os::raw::c_char,
        ptr: *const ::std::os::raw::c_char,
        token: *mut ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_interpolate_string(
        world: *mut ecs_world_t,
        str_: *const ::std::os::raw::c_char,
        vars: *const ecs_vars_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_iter_to_vars(
        it: *const ecs_iter_t,
        vars: *mut ecs_vars_t,
        offset: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ecs_meta_from_desc(
        world: *mut ecs_world_t,
        component: ecs_entity_t,
        kind: ecs_type_kind_t,
        desc: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut FLECS_IDEcsScriptID_: ecs_entity_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EcsScript {
    pub using_: ecs_vec_t,
    pub script: *mut ::std::os::raw::c_char,
    pub prop_defaults: ecs_vec_t,
    pub world: *mut ecs_world_t,
}
extern "C" {
    pub fn ecs_plecs_from_str(
        world: *mut ecs_world_t,
        name: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_plecs_from_file(
        world: *mut ecs_world_t,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_script_desc_t {
    pub entity: ecs_entity_t,
    pub filename: *const ::std::os::raw::c_char,
    pub str_: *const ::std::os::raw::c_char,
}
extern "C" {
    pub fn ecs_script_init(world: *mut ecs_world_t, desc: *const ecs_script_desc_t)
        -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_script_update(
        world: *mut ecs_world_t,
        script: ecs_entity_t,
        instance: ecs_entity_t,
        str_: *const ::std::os::raw::c_char,
        vars: *mut ecs_vars_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecs_script_clear(world: *mut ecs_world_t, script: ecs_entity_t, instance: ecs_entity_t);
}
extern "C" {
    pub fn FlecsScriptImport(world: *mut ecs_world_t);
}
extern "C" {
    pub fn ecs_rule_init(
        world: *mut ecs_world_t,
        desc: *const ecs_filter_desc_t,
    ) -> *mut ecs_rule_t;
}
extern "C" {
    pub fn ecs_rule_fini(rule: *mut ecs_rule_t);
}
extern "C" {
    pub fn ecs_rule_get_filter(rule: *const ecs_rule_t) -> *const ecs_filter_t;
}
extern "C" {
    pub fn ecs_rule_var_count(rule: *const ecs_rule_t) -> i32;
}
extern "C" {
    pub fn ecs_rule_find_var(rule: *const ecs_rule_t, name: *const ::std::os::raw::c_char) -> i32;
}
extern "C" {
    pub fn ecs_rule_var_name(rule: *const ecs_rule_t, var_id: i32)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_rule_var_is_entity(rule: *const ecs_rule_t, var_id: i32) -> bool;
}
extern "C" {
    pub fn ecs_rule_iter(world: *const ecs_world_t, rule: *const ecs_rule_t) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_rule_next(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_rule_next_instanced(it: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_rule_str(rule: *const ecs_rule_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_rule_str_w_profile(
        rule: *const ecs_rule_t,
        it: *const ecs_iter_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_rule_parse_vars(
        rule: *mut ecs_rule_t,
        it: *mut ecs_iter_t,
        expr: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_snapshot_t {
    _unused: [u8; 0],
}
extern "C" {
    pub fn ecs_snapshot_take(world: *mut ecs_world_t) -> *mut ecs_snapshot_t;
}
extern "C" {
    pub fn ecs_snapshot_take_w_iter(iter: *mut ecs_iter_t) -> *mut ecs_snapshot_t;
}
extern "C" {
    pub fn ecs_snapshot_restore(world: *mut ecs_world_t, snapshot: *mut ecs_snapshot_t);
}
extern "C" {
    pub fn ecs_snapshot_iter(snapshot: *mut ecs_snapshot_t) -> ecs_iter_t;
}
extern "C" {
    pub fn ecs_snapshot_next(iter: *mut ecs_iter_t) -> bool;
}
extern "C" {
    pub fn ecs_snapshot_free(snapshot: *mut ecs_snapshot_t);
}
extern "C" {
    pub fn ecs_parse_ws(ptr: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_parse_ws_eol(ptr: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_parse_identifier(
        name: *const ::std::os::raw::c_char,
        expr: *const ::std::os::raw::c_char,
        ptr: *const ::std::os::raw::c_char,
        token_out: *mut ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_parse_digit(
        ptr: *const ::std::os::raw::c_char,
        token: *mut ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_parse_token(
        name: *const ::std::os::raw::c_char,
        expr: *const ::std::os::raw::c_char,
        ptr: *const ::std::os::raw::c_char,
        token_out: *mut ::std::os::raw::c_char,
        delim: ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_parse_term(
        world: *const ecs_world_t,
        name: *const ::std::os::raw::c_char,
        expr: *const ::std::os::raw::c_char,
        ptr: *const ::std::os::raw::c_char,
        term_out: *mut ecs_term_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_set_os_api_impl();
}
extern "C" {
    pub fn ecs_import(
        world: *mut ecs_world_t,
        module: ecs_module_action_t,
        module_name: *const ::std::os::raw::c_char,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_import_c(
        world: *mut ecs_world_t,
        module: ecs_module_action_t,
        module_name_c: *const ::std::os::raw::c_char,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_import_from_library(
        world: *mut ecs_world_t,
        library_name: *const ::std::os::raw::c_char,
        module_name: *const ::std::os::raw::c_char,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_module_init(
        world: *mut ecs_world_t,
        c_name: *const ::std::os::raw::c_char,
        desc: *const ecs_component_desc_t,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_cpp_get_type_name(
        type_name: *mut ::std::os::raw::c_char,
        func_name: *const ::std::os::raw::c_char,
        len: usize,
        front_len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_cpp_get_symbol_name(
        symbol_name: *mut ::std::os::raw::c_char,
        type_name: *const ::std::os::raw::c_char,
        len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_cpp_get_constant_name(
        constant_name: *mut ::std::os::raw::c_char,
        func_name: *const ::std::os::raw::c_char,
        len: usize,
        back_len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_cpp_trim_module(
        world: *mut ecs_world_t,
        type_name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecs_cpp_component_validate(
        world: *mut ecs_world_t,
        id: ecs_entity_t,
        name: *const ::std::os::raw::c_char,
        symbol: *const ::std::os::raw::c_char,
        size: usize,
        alignment: usize,
        implicit_name: bool,
    );
}
extern "C" {
    pub fn ecs_cpp_component_register(
        world: *mut ecs_world_t,
        id: ecs_entity_t,
        name: *const ::std::os::raw::c_char,
        symbol: *const ::std::os::raw::c_char,
        size: ecs_size_t,
        alignment: ecs_size_t,
        implicit_name: bool,
        existing_out: *mut bool,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_cpp_component_register_explicit(
        world: *mut ecs_world_t,
        s_id: ecs_entity_t,
        id: ecs_entity_t,
        name: *const ::std::os::raw::c_char,
        type_name: *const ::std::os::raw::c_char,
        symbol: *const ::std::os::raw::c_char,
        size: usize,
        alignment: usize,
        is_component: bool,
        existing_out: *mut bool,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_cpp_enum_init(world: *mut ecs_world_t, id: ecs_entity_t);
}
extern "C" {
    pub fn ecs_cpp_enum_constant_register(
        world: *mut ecs_world_t,
        parent: ecs_entity_t,
        id: ecs_entity_t,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ecs_entity_t;
}
extern "C" {
    pub fn ecs_cpp_reset_count_get() -> i32;
}
extern "C" {
    pub fn ecs_cpp_reset_count_inc() -> i32;
}
extern "C" {
    pub fn ecs_cpp_last_member(
        world: *const ecs_world_t,
        type_: ecs_entity_t,
    ) -> *const ecs_member_t;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_event_id_record_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_stack_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_table_cache_hdr_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_rule_var_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_rule_op_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecs_rule_op_ctx_t {
    pub _address: u8,
}
